/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import { type SiteConfig } from "@azure/arm-appservice";
import { type DomainNameLabelScope } from "@microsoft/vscode-azext-azureappservice";

// The types in this file were put together because of the need to make a manual call to the API endpoint.
// They are intended to be temporary because the App Service SDK does not currently support the required API version we need.
// In the future, we expect to be able to remove these types and use the updated SDK instead.

// https://learn.microsoft.com/en-us/azure/templates/microsoft.web/sites?pivots=deployment-language-bicep#resource-format
export interface SitePayload {
    name?: string;
    kind?: string;
    location?: string;
    extendedLocation?: {
        name?: string;
        type?: string;
    };
    properties?: SitePropertiesPayload;
}

export interface SitePropertiesPayload {
    autoGeneratedDomainNameLabelScope?: DomainNameLabelScope;
    clientAffinityEnabled?: boolean;
    reserved?: boolean;
    serverFarmId?: string;
    managedEnvironmentId?: string;
    siteConfig?: SiteConfig;
    functionAppConfig?: FunctionAppConfigPayload;
}

export interface FunctionAppConfigPayload {
    deployment?: {
        storage?: {
            type?: string;
            value?: string;
            authentication?: {
                type?: string;
                userAssignedIdentityResourceId?: string;
                storageAccountConnectionStringName?: string;
            };
        };
    };
    runtime?: {
        name?: string;
        version?: string;
    };
    scaleAndConcurrency?: {
        instanceMemoryMB?: number;
        maximumInstanceCount?: number;
        alwaysReady?: { name?: string, instanceCount?: number }[];
        triggers?: {
            http?: {
                perInstanceConcurrency?: number;
            }
        };
    };
}
