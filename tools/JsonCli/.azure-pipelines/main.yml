stages:
  - stage: DotNet_JsonCli_Stage
    jobs:
      - job: DotNet_JsonCli_Job
        steps:
          - task: ms-vseng.MicroBuildTasks.30666190-6959-11e5-9f96-f56098202fef.MicroBuildSigningPlugin@2
            displayName: 'Install Signing Plugin'
            inputs:
              signType: 'Test'
            env:
              TeamName: 'AzureTools'

          - task: UseDotNet@2
            displayName: 'Use .NET sdk 6.0.x'
            inputs:
              version: 6.0.x

          - task: UseDotNet@2
            displayName: 'Use .NET sdk 7.0.x'
            inputs:
              version: 7.0.x

          - task: UseDotNet@2
            displayName: 'Use .NET sdk 8.0.x'
            inputs:
              version: 8.0.x

          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore'
            inputs:
              command: restore
              projects: 'tools/JsonCli/src/Microsoft.TemplateEngine.JsonCli.csproj'
              feedsToUse: config
              nugetConfigPath: 'tools/JsonCli/src/nuget.config'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet build'
            inputs:
              projects: 'tools/JsonCli/src/Microsoft.TemplateEngine.JsonCli.csproj'
              arguments: '--configuration Release'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish 6.0'
            inputs:
              command: publish
              publishWebProjects: false
              projects: 'tools/JsonCli/src/Microsoft.TemplateEngine.JsonCli.csproj'
              arguments: '--configuration Release --framework net6.0 --no-build'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DotNetCoreCLI@2
            displayName: 'dotnet publish 7.0'
            inputs:
              command: publish
              publishWebProjects: false
              projects: 'tools/JsonCli/src/Microsoft.TemplateEngine.JsonCli.csproj'
              arguments: '--configuration Release --framework net7.0 --no-build'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: DeleteFiles@1
            displayName: 'Delete unneeded publish files'
            inputs:
              SourceFolder: 'tools/JsonCli/src'
              Contents: |
                bin/**/publish/**/*.exe
                bin/**/publish/**/*.pdb

          # Run before we build the signing project, because we don't want to analyze that
          - task: securedevelopmentteam.vss-secure-development-tools.build-task-roslynanalyzers.RoslynAnalyzers@3
            displayName: 'Run Roslyn Analyzers'
            continueOnError: true
            condition: eq(variables['ENABLE_COMPLIANCE'], 'true')
            inputs:
              msBuildCommandline: '$(Agent.ToolsDirectory)\dotnet\dotnet.exe build "$(Build.SourcesDirectory)\tools/JsonCli/src/Microsoft.TemplateEngine.JsonCli.csproj" --configuration Release'

          - task: DotNetCoreCLI@2
            displayName: 'dotnet restore signing'
            inputs:
              command: restore
              projects: 'tools/JsonCli/src/Signing.csproj'
              feedsToUse: config
              nugetConfigPath: 'tools/JsonCli/src/nuget.config'

          # - task: DotNetCoreCLI@2
          #   displayName: 'dotnet build signing'
          #   inputs:
          #     projects: 'tools/JsonCli/src/Signing.csproj'
          #     arguments: '--configuration Release'

          - task: CopyFiles@2
            displayName: 'Copy Files to Staging'
            inputs:
              SourceFolder: '$(system.defaultworkingdirectory)/tools/JsonCli/src/'
              Contents: 'bin/**/publish/**'
              TargetFolder: '$(build.artifactstagingdirectory)/drop'
            condition: succeededOrFailed()

          # - task: PublishBuildArtifacts@1
          #   displayName: 'Publish Artifact: drop'
          #   inputs:
          #     PathtoPublish: '$(build.artifactstagingdirectory)/drop'
          #   condition: succeededOrFailed()

          # - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
          #   displayName: 'Run BinSkim'
          #   inputs:
          #     InputType: Basic
          #     AnalyzeTarget: '$(build.artifactstagingdirectory)/drop\*.dll;$(build.artifactstagingdirectory)/drop\*.exe'
          #   continueOnError: true
          #   condition: eq(variables['ENABLE_COMPLIANCE'], 'true')

          # - task: ms-vseng.MicroBuildShipTasks.7c429315-71ba-4cb3-94bb-f829c95f7915.MicroBuildCodesignVerify@2
          #   displayName: 'Verify Signed Files'
          #   inputs:
          #     TargetFolders: '$(build.artifactstagingdirectory)/drop'

        #   - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
        #     displayName: 'Publish Security Analysis Logs'
        #     condition: eq(variables['ENABLE_COMPLIANCE'], 'true')

        #   - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
        #     displayName: 'Post Analysis'
        #     inputs:
        #       AllTools: true
        #     condition: eq(variables['ENABLE_COMPLIANCE'], 'true')

        #   - task: ComponentGovernanceComponentDetection@0
        #     displayName: 'Component Detection'
        #     condition: eq(variables['ENABLE_COMPLIANCE'], 'true')
        #     inputs:
        #       sourceScanPath: tools/JsonCli # Scope only to the JSON CLI tool, since that's all this build is for
        # templateContext:
        #   outputs:
        #   - output: pipelineArtifact
        #     path: $(build.artifactstagingdirectory)/drop
        #     artifact: drop
