{"$schema":"<TBD>","contentVersion":"2016-03-04-alpha","variables":{"storageConnStringLabel":"$variables_storageConnStringLabel","appSettingsHelp":"$variables_appSettingsHelp","selectConnection":"$variables_selectConnection","parameterName":"$variables_parameterName"},"bindings":[{"type":"timerTrigger","displayName":"$timerTrigger_displayName","direction":"trigger","enabledInTryMode":true,"documentation":"## Settings for timer trigger\r\n\r\nThe settings provide a schedule expression. For example, the following schedule runs the function every minute:\r\n\r\n - `schedule`: Cron tab expression which defines schedule. The cron expression are evaluated against UTC time zone.\r\n - `name`: The variable name used in function code for the TimerTrigger. \r\n - `type`: must be *timerTrigger*\r\n - `direction`: must be *in*\r\n\r\nThe timer trigger handles multi-instance scale-out automatically: only a single instance of a particular timer function will be running across all instances.\r\n\r\n## Format of schedule expression\r\n\r\nThe schedule expression is a [CRON expression](http://en.wikipedia.org/wiki/Cron#CRON_expression) that includes 6 fields:  `{second} {minute} {hour} {day} {month} {day of the week}`. \r\n\r\nNote that many of the cron expressions you find online omit the {second} field, so if you copy from one of those you'll have to adjust for the extra field. \r\n\r\nHere are some other schedule expression examples:\r\n\r\nTo trigger once every 5 minutes:\r\n\r\n```json\r\n\"schedule\": \"0 */5 * * * *\"\r\n```\r\n\r\nTo trigger once at the top of every hour:\r\n\r\n```json\r\n\"schedule\": \"0 0 * * * *\",\r\n```\r\n\r\nTo trigger once every two hours:\r\n\r\n```json\r\n\"schedule\": \"0 0 */2 * * *\",\r\n```\r\n\r\nTo trigger once every hour from 9 AM to 5 PM:\r\n\r\n```json\r\n\"schedule\": \"0 0 9-17 * * *\",\r\n```\r\n\r\nTo trigger At 9:30 AM every day:\r\n\r\n```json\r\n\"schedule\": \"0 30 9 * * *\",\r\n```\r\n\r\nTo trigger At 9:30 AM every weekday:\r\n\r\n```json\r\n\"schedule\": \"0 30 9 * * 1-5\",\r\n```\r\n\r\n## Timer trigger C# code example\r\n\r\nThis C# code example writes a single log each time the function is triggered.\r\n\r\n```csharp\r\npublic static void Run(TimerInfo myTimer, ILogger log)\r\n{\r\n    log.LogInformation($\"C# Timer trigger function executed at: {DateTime.Now}\");    \r\n}\r\n```\r\n\r\n## Timer trigger JavaScript example\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myTimer) {\r\n    if (myTimer.IsPastDue)\r\n    {\r\n        context.log('JavaScript is running late!');\r\n    }\r\n    context.log(\"Timer last triggered at \" + myTimer.last);\r\n    context.log(\"Timer triggered at \" + myTimer.next);\r\n    \r\n    context.done();\r\n}\r\n```","settings":[{"name":"name","value":"string","defaultValue":"myTimer","required":true,"label":"$timerTrigger_name_label","help":"$timerTrigger_name_help","validators":[{"expression":"^[a-zA-Z][a-zA-Z0-9]{0,127}$","errorText":"[variables('parameterName')]"}]},{"name":"schedule","value":"string","defaultValue":"0 * * * * *","required":true,"label":"$timerTrigger_schedule_label","help":"$timerTrigger_schedule_help","validators":[{"expression":"^(\\*|((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?)(,((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?)(,((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|(((1\\d)|(2[0-3])|\\d)(\\-((1\\d)|(2[0-3])|\\d)(\\/\\d+)?)?)(,(((1\\d)|(2[0-3])|\\d)(\\-((1\\d)|(2[0-3])|\\d)(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|((([1-2]\\d)|(3[0-1])|[1-9])(\\-(([1-2]\\d)|(3[0-1])|[1-9])(\\/\\d+)?)?)(,((([1-2]\\d)|(3[0-1])|[1-9])(\\-(([1-2]\\d)|(3[0-1])|[1-9])(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|(([A-Za-z]+|(1[0-2])|[1-9])(\\-([A-Za-z]+|(1[0-2])|[1-9])(\\/\\d+)?)?)(,(([A-Za-z]+|(1[0-2])|[1-9])(\\-([A-Za-z]+|(1[0-2])|[1-9])(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|(([A-Za-z]+|[0-6])(\\-([A-Za-z]+|[0-6])(\\/\\d+)?)?)(,(([A-Za-z]+|[0-6])(\\-([A-Za-z]+|[0-6])(\\/\\d+)?)?))*)(\\/\\d+)?$","errorText":"$timerTrigger_schedule_errorText"}]}]},{"type":"queueTrigger","displayName":"$queueTrigger_displayName","direction":"trigger","enabledInTryMode":true,"documentation":"#### Settings for storage queue trigger\r\n\r\n- `name` : The variable name used in function code for the queue or the queue message. \r\n- `queueName` : The name of the queue to poll. For queue naming rules, see [Naming Queues and Metadata](https://msdn.microsoft.com/library/dd179349.aspx).\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the trigger will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *queueTrigger*.\r\n- `direction` : Must be set to *in*. \r\n\r\n\r\n#### Additional metadata for Storage Queue trigger\r\n\r\nYou can get queue metadata in your function by using these variable names:\r\n\r\n* ExpirationTime\r\n* InsertionTime\r\n* NextVisibleTime\r\n* Id\r\n* PopReceipt\r\n* DequeueCount\r\n* QueueTrigger (another way to retrieve the queue message text as a string)\r\n\r\n#### C# types for Storage Queue trigger\r\n\r\nThe queue message can be deserialized to any of the following types:\r\n\r\n* Object (from JSON)\r\n* String\r\n* Byte array \r\n* `CloudQueueMessage` (C#) \r\n\r\n#### C# example for Storage Queue trigger\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, \r\n    DateTimeOffset expirationTime, \r\n    DateTimeOffset insertionTime, \r\n    DateTimeOffset nextVisibleTime,\r\n    string queueTrigger,\r\n    string id,\r\n    string popReceipt,\r\n    int dequeueCount,\r\n    ILogger log)\r\n{\r\n    log.LogInformation($\"C# Queue trigger function processed: {myQueueItem}\\n\" +\r\n        $\"queueTrigger={queueTrigger}\\n\" +\r\n        $\"expirationTime={expirationTime}\\n\" +\r\n        $\"insertionTime={insertionTime}\\n\" +\r\n        $\"nextVisibleTime={nextVisibleTime}\\n\" +\r\n        $\"id={id}\\n\" +\r\n        $\"popReceipt={popReceipt}\\n\" + \r\n        $\"dequeueCount={dequeueCount}\");\r\n}\r\n```\r\n\r\n#### JavaScript example for Storage Queue trigger\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myQueueItem) {\r\n    context.log('Dequeue Count: ' + context.bindingData.DequeueCount);\r\n\r\n    // JavaScript supports returning strings or objects for queues\r\n    if(typeof myQueueItem === 'string') {\r\n        context.log('Trigger was a string! - ' + myQueueItem);\r\n    } else if(typeof myQueueItem === 'object') {\r\n        context.log('Trigger was an object! - \\n' + JSON.stringify(myQueueItem, null, ' '));\r\n    }\r\n    context.done(); //finish execution\r\n}\r\n```","extension":{"id":"Microsoft.Azure.WebJobs.Extensions.Storage","version":"3.0.10"},"settings":[{"name":"name","value":"string","defaultValue":"myQueueItem","required":true,"label":"$queueTrigger_name_label","help":"$queueTrigger_name_help","validators":[{"expression":"^[a-zA-Z][a-zA-Z0-9]{0,127}$","errorText":"[variables('parameterName')]"}]},{"name":"queueName","value":"string","defaultValue":"myqueue","required":true,"label":"$queueTrigger_queueName_label","help":"$queueTrigger_queueName_help","validators":[{"expression":"^[0-9a-z][a-z0-9-]{1,61}[0-9a-z]$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$","errorText":"$queueTrigger_queueName_errorText"}]},{"name":"connection","value":"string","resource":"Storage","required":true,"label":"[variables('storageConnStringLabel')]","help":"[variables('appSettingsHelp')]","placeholder":"[variables('selectConnection')]"}]},{"type":"blobTrigger","displayName":"$blobTrigger_displayName","direction":"trigger","enabledInTryMode":true,"documentation":"#### Settings for storage blob trigger\r\n\r\n- `name` : The variable name used in function code for the blob. \r\n- `path` : A path that specifies the container to monitor, and optionally a blob name pattern.\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the trigger will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *blobTrigger*.\r\n- `direction` : Must be set to *in*.\r\n\r\n#### Blob trigger name patterns\r\n\r\nYou can specify a blob name pattern in the `path` property. For example:\r\n\r\n```json\r\n\"path\": \"input/original-{name}\",\r\n```\r\n\r\nThis path would find a blob named *original-Blob1.txt* in the *input* container, and the value of the `name` variable in function code would be `Blob1`.\r\n\r\nAnother example:\r\n\r\n```json\r\n\"path\": \"input/{blobname}.{blobextension}\",\r\n```\r\n\r\nThis path would also find a blob named *original-Blob1.txt*, and the value of the `blobname` and `blobextension` variables in function code would be *original-Blob1* and *txt*.\r\n\r\nYou can restrict the types of blobs that trigger the function by specifying a pattern with a fixed value for the file extension. If you set the `path` to  *samples/{name}.png*, only *.png* blobs in the *samples* container will trigger the function.\r\n\r\nIf you need to specify a name pattern for blob names that have curly braces in the name, double the curly braces. For example, if you want to find blobs in the *images* container that have names like this:\r\n\r\n\t\t{20140101}-soundfile.mp3\r\n\r\nuse this for the `path` property:\r\n\r\n\t\timages/{{20140101}}-{name}\r\n\r\nIn the example, the `name` variable value would be *soundfile.mp3*. \r\n\r\n#### Blob trigger supported types\r\n\r\nThe blob can be deserialized to any of the following types in JavaScript or C# functions:\r\n\r\n* Object (from JSON)\r\n* String\r\n\r\nIn C# functions you can also bind to any of the following types:\r\n\r\n* `TextReader`\r\n* `Stream`\r\n* `ICloudBlob`\r\n* `CloudBlockBlob`\r\n* `CloudPageBlob`\r\n* `CloudBlobContainer`\r\n* `CloudBlobDirectory`\r\n* `IEnumerable<CloudBlockBlob>`\r\n* `IEnumerable<CloudPageBlob>`\r\n* Other types deserialized by [ICloudBlobStreamBinder](https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-webjobs-sdk-storage-blobs-how-to/)\r\n\r\n#### Blob trigger C# code example\r\n\r\n```csharp\r\npublic static void Run(string myBlob, ILogger log)\r\n{\r\n    log.LogInformation($\"C# Blob trigger function processed: {myBlob}\");\r\n}\r\n```\r\n\r\n#### Blob trigger JavaScript example\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myBlob) {\r\n    context.log(myBlob);\r\n    context.done();\r\n}\r\n```","extension":{"id":"Microsoft.Azure.WebJobs.Extensions.Storage","version":"3.0.10"},"settings":[{"name":"name","value":"string","defaultValue":"myBlob","required":true,"label":"$blobTrigger_name_label","help":"$blobTrigger_name_help","validators":[{"expression":"^[a-zA-Z][a-zA-Z0-9]{0,127}$","errorText":"[variables('parameterName')]"}]},{"name":"path","value":"string","defaultValue":"mycontainer","required":true,"label":"$blobTrigger_path_label","help":"$blobTrigger_path_help","validators":[{"expression":"(((^[a-z0-9](?:[a-z0-9]|(?:\\-(?!\\-))){1,61}[a-z0-9])|(^[{][a-zA-Z0-9]{1,126}[}])|(^[%][a-zA-Z0-9]{1,126}[%]))[\\/](\\S){0,1023}[^\\/]$)|(((^[a-z0-9](?:[a-z0-9]|(?:\\-(?!\\-))){1,61}[a-z0-9]$)|(^[{][a-zA-Z0-9]{1,126}[}]$)|(^[%][a-zA-Z0-9]{1,126}[%]$)))","errorText":"$blobTrigger_path_errorText"}]},{"name":"connection","value":"string","resource":"Storage","required":true,"label":"[variables('storageConnStringLabel')]","help":"[variables('appSettingsHelp')]","placeholder":"[variables('selectConnection')]"}]},{"type":"httpTrigger","displayName":"$httpTrigger_displayName","direction":"trigger","enabledInTryMode":true,"documentation":"## Settings for HTTP bindings\r\n\r\nThe settings provide properties that pertain to both the request and response.\r\n\r\nProperties for the HTTP request:\r\n\r\n- `name` : Variable name used in function code for the request object (or the request body in the case of JavaScript functions).\r\n- `type` : Must be set to *httpTrigger*.\r\n- `direction` : Must be set to *in*. \r\n- `authLevel` : Set to \"function\" to require the API key, \"anonymous\" to drop the API key requirement, or \"admin\" to require the master API key.\r\n\r\nProperties for the HTTP response:\r\n\r\n- `name` : Variable name used in function code for the response object.\r\n- `type` : Must be set to *http*.\r\n- `direction` : Must be set to *out*. \r\n\r\n## URL to trigger the function\r\n\r\nTo trigger a function, you send an HTTP request to a URL that is a combination of the function app URL and the function name:\r\n\r\n```\r\n https://{function app name}.azurewebsites.net/api/{function name} \r\n```\r\n\r\n## API keys\r\n\r\nBy default, an API key must be included with an HTTP request to trigger an HTTP function. The key can be included in a query string variable named `code`, or it can be included in an `x-functions-key` HTTP header. You can indicate that an API key is not required by setting the `authLevel` property to \"anonymous\" in the *function.json* file.\r\n\r\nYou can find API key values in the *D:\\home\\data\\Functions\\secrets* folder in the file system of the function app.  The master key and function key are set in the *host.json* file, as shown in this example. \r\n\r\n```json\r\n{\r\n  \"masterKey\": \"K6P2VxK6P2VxK6P2VxmuefWzd4ljqeOOZWpgDdHW269P2hb7OSJbDg==\",\r\n  \"functionKey\": \"OBmXvc2K6P2VxK6P2VxK6P2VxVvCdB89gChyHbzwTS/YYGWWndAbmA==\"\r\n}\r\n```\r\n\r\nThe function key from *host.json* can be used to trigger any function but won't trigger a disabled function. The master key can be used to trigger any function and will trigger a function even if it's disabled. You can configure a function to require the master key by setting the `authLevel` property to \"admin\". \r\n\r\nIf the *secrets* folder contains a JSON file with the same name as a function, the `key` property in that file can also be used to trigger the function, and this key will only work with the function it refers to. For example, the API key for a function named `HttpTrigger` is specified in *HttpTrigger.json* in the *secrets* folder. Here is an example:\r\n\r\n```json\r\n{\r\n  \"key\":\"0t04nmo37hmoir2rwk16skyb9xsug32pdo75oce9r4kg9zfrn93wn4cx0sxo4af0kdcz69a4i\"\r\n}\r\n```\r\n\r\n## Example C# code for an HTTP trigger function \r\n\r\n```csharp\r\nusing System.Net;\r\nusing System.Threading.Tasks;\r\n\r\npublic static async Task<HttpResponseMessage> Run(HttpRequestMessage req, ILogger log)\r\n{\r\n    log.LogInformation(\"C# HTTP trigger function processed a request.\");\r\n\r\n    // parse query parameter\r\n    string name = req.GetQueryNameValuePairs()\r\n        .FirstOrDefault(q => string.Compare(q.Key, \"name\", true) == 0)\r\n        .Value;\r\n\r\n    // Get request body\r\n    dynamic data = await req.Content.ReadAsAsync<object>();\r\n\r\n    // Set name to query string or body data\r\n    name = name ?? data?.name;\r\n\r\n    return name == null\r\n        ? req.CreateResponse(HttpStatusCode.BadRequest, \"Please pass a name on the query string or in the request body\")\r\n        : req.CreateResponse(HttpStatusCode.OK, \"Hello \" + name);\r\n}\r\n```\r\n\r\n## Example JavaScript code for an HTTP trigger function \r\n\r\nWe support an [express-like api](https://expressjs.com/en/4x/api.html#res) for JavaScript http triggers.\r\nSee supported methods for [context.req](https://github.com/Azure/azure-functions-host/blob/v1.x/src/WebJobs.Script/azurefunctions/http/request.js) and [context.res](https://github.com/Azure/azure-functions-host/blob/v1.x/src/WebJobs.Script/azurefunctions/http/response.js).\r\n\r\n```javascript\r\nmodule.exports = function(context, req) {\r\n    context.log('JavaScript HTTP trigger function processed a request.');\r\n\r\n    if (req.query.name || (req.body && req.body.name)) {\r\n        // using the express api style\r\n        context.res\r\n            // set statusCode to 200\r\n            .status(200)\r\n            // set a header on the response\r\n            .set(\"QuerySet\", req.query.name != undefined)\r\n            // send will automatically call context.done\r\n            .send(\"Hello \" + (req.query.name || req.body.name));\r\n    } else {\r\n        // alternate style\r\n        context.res = {\r\n            status: 400,\r\n            body: \"Please pass a name on the query string or in the request body\"\r\n        };\r\n        context.done();\r\n    }\r\n};\r\n```\r\n","settings":[{"name":"name","value":"string","defaultValue":"req","required":true,"label":"$httpTrigger_name_label","help":"$httpTrigger_name_help","validators":[{"expression":"^[a-zA-Z][a-zA-Z0-9]{0,127}$","errorText":"[variables('parameterName')]"}]},{"name":"route","value":"string","required":false,"label":"$httpTrigger_route_label","help":"$httpTrigger_route_help","validators":[]},{"name":"authLevel","value":"enum","required":true,"defaultValue":"function","enum":[{"value":"function","display":"Function"},{"value":"anonymous","display":"Anonymous"},{"value":"admin","display":"Admin"}],"label":"$httpTrigger_authLevel_label","help":"$httpTrigger_authLevel_help"},{"name":"methods","value":"checkBoxList","defaultValue":["get","post","delete","head","patch","put","options","trace"],"enum":[{"value":"get","display":"GET"},{"value":"post","display":"POST"},{"value":"delete","display":"DELETE"},{"value":"head","display":"HEAD"},{"value":"patch","display":"PATCH"},{"value":"put","display":"PUT"},{"value":"options","display":"OPTIONS"},{"value":"trace","display":"TRACE"}],"label":"$httpTrigger_methods_label","help":"$httpTrigger_methods_help"}],"rules":[{"name":"methodRule","type":"exclusivity","values":[{"value":"allMethods","display":"All methods","hiddenSettings":["methods"],"shownSettings":[]},{"value":"methods","display":"Selected methods","hiddenSettings":[],"shownSettings":["methods"]}],"label":"$httpTrigger_methodRule_label","help":"$httpTrigger_methodRule_help"}]},{"type":"cosmosDBTrigger","displayName":"$cosmosDB_trigger_displayName","direction":"trigger","enabledInTryMode":false,"documentation":"#### Settings for Cosmos DB trigger binding\r\n\r\nThe Cosmos DB Trigger leverages the [Cosmos DB Change Feed](https://docs.microsoft.com/azure/cosmos-db/change-feed) to listen for changes across partitions. It uses a **second collection** to store *leases* over the partitions.\r\n\r\nBoth the collection being monitored for changes and the collection that will hold the leases need to be available for the trigger to work.\r\n\r\nThe settings for an Azure Cosmos DB trigger specifies the following properties:\r\n\r\n- `type` : Must be set to *cosmosDBTrigger*.\r\n- `name` : The variable name used in function code for the list of documents. \r\n- `direction` : Must be set to *in*. \r\n- `databaseName` : The name of the database that holds the collection to monitor.\r\n- `collectionName` : The name of the collection to monitor.\r\n- `connectionStringSetting` *optional*: The name of an app setting that contains the connection string to the service which holds the collection to monitor. If `connectionStringSetting` is not set then the value of AzureWebJobsCosmosDBConnectionStringName setting is used.\r\n- `leaseConnectionStringSetting` : *optional*. The name of an app setting that contains the connection string to the service which holds the lease collection. If not set it will connect to the service defined by `connectionStringSetting`.\r\n- `leaseDatabaseName` : *optional*. The name of the database that holds the collection to store leases. If not set, it will use the value of `databaseName`.\r\n- `leaseCollectionName` : *optional*. The name of the collection to store leases. If not set, it will use \"leases\".\r\n- `createLeaseCollectionIfNotExists` : *optional*. true/false. Checks for existence and automatically creates the leases collection. Default is `false`.\r\n- `leaseCollectionThroughput` : *optional*. When `createLeaseCollectionIfNotExists` is set to `true`, defines the amount of Request Units to assign to the created lease collection.\r\n\r\n> Connection strings used for the Lease collection require **write permission**.\r\n\r\n#### Azure Cosmos DB trigger C# example\r\n \r\n\t#r \"Microsoft.Azure.Documents.Client\"\r\n\tusing Microsoft.Azure.Documents;\r\n\tusing System.Collections.Generic;\r\n\tusing System;\r\n\tpublic static void Run(IReadOnlyList<Document> input, ILogger log)\r\n\t{\r\n\t\tlog.LogInformation(\"Documents modified \" + input.Count);\r\n\t\tlog.LogInformation(\"First document Id \" + input[0].Id);\r\n\t}\r\n\r\n#### Azure Cosmos DB trigger JavaScript example\r\n\r\n\tmodule.exports = function (context, input) {\r\n\t\tcontext.log('First document Id modified : ', input[0].id);\r\n\r\n\t\tcontext.done();\r\n\t}\r\n","extension":{"id":"Microsoft.Azure.WebJobs.Extensions.CosmosDB","version":"3.0.5"},"settings":[{"name":"name","value":"string","defaultValue":"inputDocuments","required":true,"label":"$cosmosDBIn_name_label","help":"$cosmosDBIn_name_help","validators":[{"expression":"^[a-zA-Z][a-zA-Z0-9]{0,127}$","errorText":"[variables('parameterName')]"}]},{"name":"connectionStringSetting","value":"string","required":true,"resource":"DocumentDB","label":"$cosmosDBIn_connection_label","help":"$cosmosDBIn_connection_help","placeholder":"[variables('selectConnection')]"},{"name":"databaseName","value":"string","defaultValue":"","required":true,"label":"$cosmosDBIn_databaseName_label","help":"$cosmosDBIn_databaseName_help"},{"name":"collectionName","value":"string","defaultValue":"","required":true,"label":"$cosmosDBIn_collectionName_label","help":"$cosmosDBIn_collectionName_help"},{"name":"leaseCollectionName","value":"string","required":true,"label":"$cosmosDBIn_leaseCollectionName_label","help":"$cosmosDBIn_leaseCollectionName_help"},{"name":"createLeaseCollectionIfNotExists","value":"boolean","defaultValue":true,"required":true,"label":"$cosmosDBIn_createIfNotExists_label","help":"$cosmosDBIn_createIfNotExists_help"}]}]}
