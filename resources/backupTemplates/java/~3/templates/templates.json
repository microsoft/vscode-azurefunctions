[
  {
    "id": "HttpTrigger-Java",
    "metadata": {
      "name": "HttpTrigger",
      "description": "$HttpTrigger_description",
      "defaultFunctionName": "httpTriggerJava",
      "language": "Java",
      "userPrompt": [
        "authLevel"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "authLevel": "function",
          "type": "httpTrigger",
          "direction": "in",
          "name": "req",
          "methods": [
            "get",
            "post"
          ]
        },
        {
          "type": "http",
          "direction": "out",
          "name": "res"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport java.util.*;\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with HTTP Trigger.\n */\npublic class $className$ {\n    /**\n     * This function listens at endpoint \"/api/$functionName$\". Two ways to invoke it using \"curl\" command in bash:\n     * 1. curl -d \"HTTP Body\" {your host}/api/$functionName$\n     * 2. curl {your host}/api/$functionName$?name=HTTP%20Query\n     */\n    @FunctionName(\"$functionName$\")\n    public HttpResponseMessage run(\n            @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.$authLevel$) HttpRequestMessage<Optional<String>> request,\n            final ExecutionContext context) {\n        context.getLogger().info(\"Java HTTP trigger processed a request.\");\n\n        // Parse query parameter\n        String query = request.getQueryParameters().get(\"name\");\n        String name = request.getBody().orElse(query);\n\n        if (name == null) {\n            return request.createResponseBuilder(HttpStatus.BAD_REQUEST).body(\"Please pass a name on the query string or in the request body\").build();\n        } else {\n            return request.createResponseBuilder(HttpStatus.OK).body(\"Hello, \" + name).build();\n        }\n    }\n}\n"
    }
  },
  {
    "id": "BlobTrigger-Java",
    "metadata": {
      "name": "BlobTrigger",
      "description": "$BlobTrigger_description",
      "defaultFunctionName": "blobTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connection",
        "path"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "name": "myBlob",
          "type": "blobTrigger",
          "direction": "in",
          "path": "samples-workitems",
          "connection": ""
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Azure Blob trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new or updated blob is detected at the specified path. The blob contents are provided as input to this function.\n     */\n    @FunctionName(\"$functionName$\")\n    @StorageAccount(\"$connection$\")\n    public void run(\n        @BlobTrigger(name = \"content\", path = \"$path$/{name}\", dataType = \"binary\") byte[] content,\n        @BindingName(\"name\") String name,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Blob trigger function processed a blob. Name: \" + name + \"\\n  Size: \" + content.length + \" Bytes\");\n    }\n}\n"
    }
  },
  {
    "id": "QueueTrigger-Java",
    "metadata": {
      "name": "QueueTrigger",
      "description": "$QueueTrigger_description",
      "defaultFunctionName": "queueTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connection",
        "queueName"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "name": "myQueueItem",
          "type": "queueTrigger",
          "direction": "in",
          "queueName": "queue-items",
          "connection": ""
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Azure Storage Queue trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new message is received at the specified path. The message contents are provided as input to this function.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @QueueTrigger(name = \"message\", queueName = \"$queueName$\", connection = \"$connection$\") String message,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Queue trigger function processed a message: \" + message);\n    }\n}\n"
    }
  },
  {
    "id": "TimerTrigger-Java",
    "metadata": {
      "name": "TimerTrigger",
      "description": "$TimerTrigger_description",
      "defaultFunctionName": "timerTriggerJava",
      "language": "Java",
      "userPrompt": [
        "schedule"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "name": "myTimer",
          "type": "timerTrigger",
          "direction": "in",
          "schedule": "0 */5 * * * *"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport java.time.*;\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Timer trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked periodically according to the specified schedule.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @TimerTrigger(name = \"timerInfo\", schedule = \"$schedule$\") String timerInfo,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Timer trigger function executed at: \" + LocalDateTime.now());\n    }\n}\n"
    }
  },
  {
    "id": "EventGridTrigger-Java",
    "metadata": {
      "name": "EventGridTrigger",
      "description": "$EventGridTrigger_description",
      "defaultFunctionName": "eventGridTriggerJava",
      "language": "Java",
      "userPrompt": []
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "eventGridTrigger",
          "name": "eventGridEvent",
          "direction": "in"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Event Grid trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when an event is received from Event Grid.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(@EventGridTrigger(name = \"eventGridEvent\") String message, final ExecutionContext context) {\n        context.getLogger().info(\"Java Event Grid trigger function executed.\");\n        context.getLogger().info(message);\n    }\n}\n"
    }
  },
  {
    "id": "EventHubTrigger-Java",
    "metadata": {
      "name": "EventHubTrigger",
      "description": "$EventHubTrigger_description",
      "defaultFunctionName": "eventHubTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connection",
        "eventHubName",
        "consumerGroup"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "eventHubTrigger",
          "name": "myEventHubMessage",
          "direction": "in",
          "eventHubName": "samples-workitems",
          "connection": "",
          "consumerGroup": "$Default"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\nimport java.util.*;\n\n/**\n * Azure Functions with Event Hub trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when an event is received from Event Hub.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @EventHubTrigger(name = \"message\", eventHubName = \"$eventHubName$\", connection = \"$connection$\", consumerGroup = \"$consumerGroup$\", cardinality = Cardinality.MANY) List<String> message,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Event Hub trigger function executed.\");\n        context.getLogger().info(\"Length:\" + message.size());\n        message.forEach(singleMessage -> context.getLogger().info(singleMessage));\n    }\n}\n"
    }
  },
  {
    "id": "CosmosDBTrigger-Java",
    "metadata": {
      "name": "CosmosDBTrigger",
      "description": "$CosmosDBTrigger_description",
      "defaultFunctionName": "cosmosDBTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connectionStringSetting",
        "databaseName",
        "collectionName",
        "leaseCollectionName",
        "createLeaseCollectionIfNotExists"
      ]
    },
    "bundle": [
      "~1",
      "~2",
      "~3"
    ],
    "function": {
      "bindings": [
        {
          "type": "cosmosDBTrigger",
          "name": "documents",
          "direction": "in",
          "leaseCollectionName": "leases"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Cosmos DB trigger.\n * \n * This template uses an outdated version of the Azure Cosmos DB extension. Learn about the new extension at https://aka.ms/cosmos-db-azure-functions-extension-v4\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when there are inserts or updates in the specified database and collection.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @CosmosDBTrigger(\n            name = \"items\",\n            databaseName = \"$databaseName$\",\n            collectionName = \"$collectionName$\",\n            leaseCollectionName=\"$leaseCollectionName$\",\n            connectionStringSetting = \"$connectionStringSetting$\",\n            createLeaseCollectionIfNotExists = $createLeaseCollectionIfNotExists$\n        )\n        Object[] items,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Cosmos DB trigger function executed.\");\n        context.getLogger().info(\"Documents count: \" + items.length);\n    }\n}\n"
    }
  },
  {
    "id": "ServiceBusQueueTrigger-Java",
    "metadata": {
      "name": "ServiceBusQueueTrigger",
      "description": "$ServiceBusQueueTrigger_description",
      "defaultFunctionName": "ServiceBusQueueTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connection",
        "queueName"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "name": "mySbMsg",
          "type": "serviceBusTrigger",
          "direction": "in",
          "queueName": "myinputqueue",
          "connection": ""
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Service Bus Trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new message is received at the Service Bus Queue.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n            @ServiceBusQueueTrigger(name = \"message\", queueName = \"$queueName$\", connection = \"$connection$\") String message,\n            final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Service Bus Queue trigger function executed.\");\n        context.getLogger().info(message);\n    }\n}\n"
    }
  },
  {
    "id": "ServiceBusTopicTrigger-Java",
    "metadata": {
      "name": "ServiceBusTopicTrigger",
      "description": "$ServiceBusTopicTrigger_description",
      "defaultFunctionName": "ServiceBusTopicTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connection",
        "topicName",
        "subscriptionName"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "name": "mySbMsg",
          "type": "serviceBusTrigger",
          "direction": "in",
          "topicName": "mytopic",
          "subscriptionName": "mysubscription",
          "connection": ""
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Service Topic Trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new message is received at the Service Bus Topic.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @ServiceBusTopicTrigger(\n            name = \"message\",\n            topicName = \"$topicName$\",\n            subscriptionName = \"$subscriptionName$\",\n            connection = \"$connection$\"\n        )\n        String message,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Service Bus Topic trigger function executed.\");\n        context.getLogger().info(message);\n    }\n}"
    }
  },
  {
    "id": "RabbitMQTrigger-Java",
    "metadata": {
      "name": "RabbitMQTrigger",
      "description": "$RabbitMQTrigger_description",
      "defaultFunctionName": "rabbitMQTriggerJava",
      "language": "Java",
      "userPrompt": [
        "connectionStringSetting",
        "queueName"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "name": "myQueueItem",
          "type": "rabbitMqTrigger",
          "direction": "in",
          "queueName": "",
          "connectionStringSetting": ""
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.ExecutionContext;\nimport com.microsoft.azure.functions.annotation.FunctionName;\nimport com.microsoft.azure.functions.rabbitmq.annotation.RabbitMQTrigger;\n\n/**\n * Azure Functions with RabbitMQ Trigger.\n *\n * This function will be invoked when a new message is received in RabbitMQ\n * Please add com.microsoft.azure.functions:azure-functions-java-library-rabbitmq to your project dependencies\n * You may get the example and latest version in https://search.maven.org/artifact/com.microsoft.azure.functions/azure-functions-java-library-rabbitmq\n * \n */\npublic class $className$ {\n    @FunctionName(\"$functionName$\")\n    public void run(\n            @RabbitMQTrigger(\n                    connectionStringSetting = \"$connectionStringSetting$\",\n                    queueName = \"$queueName$\"\n            ) String input,\n            final ExecutionContext context) {\n        context.getLogger().info(\"Java RabbitMQ trigger processed a request.\" + input);\n    }\n}"
    }
  },
  {
    "id": "KafkaTrigger-Java",
    "metadata": {
      "name": "KafkaTrigger",
      "description": "$KafkaTrigger_description",
      "defaultFunctionName": "KafkaTriggerJava",
      "language": "Java",
      "userPrompt": [
        "name",
        "topic",
        "brokerList",
        "consumerGroup",
        "authenticationMode",
        "protocol"
      ]
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "name": "kafkaTrigger",
          "type": "kafkaTrigger",
          "direction": "in",
          "brokerList": "BrokerList",
          "topic": "topic",
          "username": "$ConnectionString",
          "password": "%Password%",
          "protocol": "saslSsl",
          "authenticationMode": "plain",
          "consumerGroup": "$Default"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Kafka Trigger.\n */\npublic class $className$ {\n    /**\n     * This function consume KafkaEvents on the localhost. Change the topic, brokerList, and consumerGroup to fit your enviornment.\n     * The function is trigged one for each KafkaEvent\n     * @param kafkaEventData\n     * @param context\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n            @KafkaTrigger(name = \"$name$\", \n                          topic = \"$topic$\", \n                          brokerList = \"$brokerList$\",\n                          username = \"$ConnectionString\",\n                          password = \"%KafkaPassword%\",\n                          authenticationMode = BrokerAuthenticationMode.$authenticationMode$,\n                          protocol = BrokerProtocol.$protocol$,\n                          consumerGroup=\"$Default\") String kafkaEventData,\n            final ExecutionContext context) {\n        context.getLogger().info(kafkaEventData);\n    }\n}"
    }
  },
  {
    "id": "v4-CosmosDBTrigger",
    "metadata": {
      "name": "CosmosDBTrigger (Bundle V4)",
      "description": "$CosmosDBTrigger_description",
      "defaultFunctionName": "cosmosDBTriggerJava",
      "language": "Java",
      "userPrompt": [
        "databaseName",
        "containerName",
        "leaseContainerName",
        "connection",
        "createLeaseContainerIfNotExists"
      ]
    },
    "bundle": [
      "~4"
    ],
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "v4-CosmosDBTrigger",
          "direction": "in",
          "name": "items",
          "databaseName": "database",
          "containerName": "container",
          "leaseContainerName": "leaseContainerName",
          "connection": "",
          "createLeaseContainerIfNotExists": true
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\nimport java.util.ArrayList;\n\n/**\n * Azure Functions with Cosmos DB trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when there are inserts or updates in the specified database and collection.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @CosmosDBTrigger(\n            name = \"items\",\n            databaseName = \"$databaseName$\",\n            containerName = \"$containerName$\",\n            leaseContainerName=\"$leaseContainerName$\",\n            connection = \"$connection$\",\n            createLeaseContainerIfNotExists = $createLeaseContainerIfNotExists$\n        )\n        Object inputItem,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Cosmos DB trigger function executed.\");\n        ArrayList<?> inputItems = (ArrayList<?>) inputItem;\n        context.getLogger().info(\"Documents modified: \" + inputItems.size());\n    }\n}\n"
    }
  },
  {
    "id": "DurableFunctionsOrchestrator-Java",
    "metadata": {
      "name": "DurableFunctionsOrchestrator",
      "description": "$DurableFunctionsOrchestrator_description",
      "defaultFunctionName": "DurableFunctionsOrchestrator",
      "language": "Java"
    },
    "bundle": [
      "~4"
    ],
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "durableClient",
          "direction": "in",
          "name": "durableContext"
        },
        {
          "type": "activityTrigger",
          "direction": "in",
          "name": "name"
        },
        {
          "type": "orchestrationTrigger",
          "direction": "in",
          "name": "runtimeState"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\nimport java.util.*;\n\nimport com.microsoft.durabletask.*;\nimport com.microsoft.durabletask.azurefunctions.DurableActivityTrigger;\nimport com.microsoft.durabletask.azurefunctions.DurableClientContext;\nimport com.microsoft.durabletask.azurefunctions.DurableClientInput;\nimport com.microsoft.durabletask.azurefunctions.DurableOrchestrationTrigger;\n\n/**\n * Please follow the below steps to run this durable function sample\n * 1. Send an HTTP GET/POST request to endpoint `StartHelloCities` to run a durable function\n * 2. Send request to statusQueryGetUri in `StartHelloCities` response to get the status of durable function\n * For more instructions, please refer https://aka.ms/durable-function-java\n * \n * Please add com.microsoft:durabletask-azure-functions to your project dependencies\n * Please add `\"extensions\": { \"durableTask\": { \"hubName\": \"JavaTestHub\" }}` to your host.json\n */\npublic class $className$ {\n    /**\n     * This HTTP-triggered function starts the orchestration.\n     */\n    @FunctionName(\"StartOrchestration\")\n    public HttpResponseMessage startOrchestration(\n            @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.ANONYMOUS) HttpRequestMessage<Optional<String>> request,\n            @DurableClientInput(name = \"durableContext\") DurableClientContext durableContext,\n            final ExecutionContext context) {\n        context.getLogger().info(\"Java HTTP trigger processed a request.\");\n\n        DurableTaskClient client = durableContext.getClient();\n        String instanceId = client.scheduleNewOrchestrationInstance(\"Cities\");\n        context.getLogger().info(\"Created new Java orchestration with instance ID = \" + instanceId);\n        return durableContext.createCheckStatusResponse(request, instanceId);\n    }\n\n    /**\n     * This is the orchestrator function, which can schedule activity functions, create durable timers,\n     * or wait for external events in a way that's completely fault-tolerant.\n     */\n    @FunctionName(\"Cities\")\n    public String citiesOrchestrator(\n            @DurableOrchestrationTrigger(name = \"ctx\") TaskOrchestrationContext ctx) {\n        String result = \"\";\n        result += ctx.callActivity(\"Capitalize\", \"Tokyo\", String.class).await() + \", \";\n        result += ctx.callActivity(\"Capitalize\", \"London\", String.class).await() + \", \";\n        result += ctx.callActivity(\"Capitalize\", \"Seattle\", String.class).await() + \", \";\n        result += ctx.callActivity(\"Capitalize\", \"Austin\", String.class).await();\n        return result;\n    }\n\n    /**\n     * This is the activity function that gets invoked by the orchestration.\n     */\n    @FunctionName(\"Capitalize\")\n    public String capitalize(\n            @DurableActivityTrigger(name = \"name\") String name,\n            final ExecutionContext context) {\n        context.getLogger().info(\"Capitalizing: \" + name);\n        return name.toUpperCase();\n    }\n}"
    }
  },
  {
    "id": "SqlOutputBinding-Java",
    "metadata": {
      "name": "SqlOutputBinding",
      "description": "$SqlOutputBinding_description",
      "defaultFunctionName": "SqlOutputBindingJava",
      "language": "Java",
      "userPrompt": [
        "table",
        "SqlConnectionString"
      ]
    },
    "bundle": [
      "~4"
    ],
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "sql",
          "name": "items",
          "direction": "out",
          "commandText": "[dbo].[table1]",
          "connectionStringSetting": "SqlConnectionString"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.HttpMethod;\nimport com.microsoft.azure.functions.HttpRequestMessage;\nimport com.microsoft.azure.functions.HttpResponseMessage;\nimport com.microsoft.azure.functions.HttpStatus;\nimport com.microsoft.azure.functions.OutputBinding;\nimport com.microsoft.azure.functions.annotation.AuthorizationLevel;\nimport com.microsoft.azure.functions.annotation.FunctionName;\nimport com.microsoft.azure.functions.annotation.HttpTrigger;\nimport com.microsoft.azure.functions.sql.annotation.SQLOutput;\nimport com.fasterxml.jackson.core.JsonParseException;\nimport com.fasterxml.jackson.databind.JsonMappingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\nimport java.io.IOException;\nimport java.util.Optional;\n\npublic class $className$ {\n    /**\n     * Visit Visit https://aka.ms/sqlbindingsoutput to learn how to use this output binding\n     * \n     * These tasks should be completed prior to running:\n     * 1. Add com.microsoft.azure.functions:azure-functions-java-library-sql and com.fasterxml.jackson.core:jackson-databind to your project dependencies\n     * 2. Add an app setting named \"SqlConnectionString\" containing the connection string to use for the SQL connection\n     * 3. Change the bundle name in host.json to \"Microsoft.Azure.Functions.ExtensionBundle\" and the version to \"[4.*, 5.0.0)\"\n     */\n    @FunctionName(\"$functionName$\")\n    public HttpResponseMessage run(\n            @HttpTrigger(\n                name = \"req\",\n                methods = {HttpMethod.POST},\n                authLevel = AuthorizationLevel.FUNCTION,\n                route = \"\")\n                HttpRequestMessage<Optional<String>> request,\n            @SQLOutput(\n                name = \"output\",\n                commandText = \"$table$\",\n                connectionStringSetting = \"$SqlConnectionString$\")\n                OutputBinding<TodoItem> output) throws JsonParseException, JsonMappingException, IOException {\n\n        String json = request.getBody().get();\n        ObjectMapper mapper = new ObjectMapper();\n        TodoItem todoItem = mapper.readValue(json, TodoItem.class);\n        output.setValue(todoItem);\n\n        return request.createResponseBuilder(HttpStatus.OK).header(\"Content-Type\", \"application/json\").body(todoItem).build();\n    }\n\n    public static class TodoItem {\n        public String Id;\n        public int Priority;\n        public String Description;\n\n        public String getId() {\n            return Id;\n        }\n    \n        public void setId(String id) {\n            Id = id;\n        }\n    \n        public int getPriority() {\n            return Priority;\n        }\n    \n        public void setPriority(int priority) {\n            Priority = priority;\n        }\n    \n        public String getDescription() {\n            return Description;\n        }\n    \n        public void setDescription(String description) {\n            Description = description;\n        }\n    }\n}"
    }
  },
  {
    "id": "SqlInputBinding-Java",
    "metadata": {
      "name": "SqlInputBinding",
      "description": "$SqlInputBinding_description",
      "defaultFunctionName": "SqlInputBindingJava",
      "language": "Java",
      "userPrompt": [
        "object",
        "SqlConnectionString"
      ]
    },
    "bundle": [
      "~4"
    ],
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "sql",
          "name": "results",
          "direction": "in",
          "commandText": "SELECT * FROM [dbo].[table1]",
          "commandType": "Text",
          "connectionStringSetting": "SqlConnectionString"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\n\nimport com.microsoft.azure.functions.HttpMethod;\nimport com.microsoft.azure.functions.HttpRequestMessage;\nimport com.microsoft.azure.functions.HttpResponseMessage;\nimport com.microsoft.azure.functions.HttpStatus;\nimport com.microsoft.azure.functions.annotation.AuthorizationLevel;\nimport com.microsoft.azure.functions.annotation.FunctionName;\nimport com.microsoft.azure.functions.annotation.HttpTrigger;\nimport com.microsoft.azure.functions.sql.annotation.SQLInput;\n\nimport java.util.Optional;\n\npublic class $className$ {\n    /**\n     * Visit https://aka.ms/sqlbindingsinput to learn how to use this input binding\n     * \n     * These tasks should be completed prior to running:\n     * 1. Add com.microsoft.azure.functions:azure-functions-java-library-sql to your project dependencies\n     * 2. Add an app setting named \"SqlConnectionString\" containing the connection string to use for the SQL connection\n     * 3. Change the bundle name in host.json to \"Microsoft.Azure.Functions.ExtensionBundle\" and the version to \"[4.*, 5.0.0)\"\n     */\n    @FunctionName(\"$functionName$\")\n    public HttpResponseMessage run(\n            @HttpTrigger(\n                name = \"req\",\n                methods = {HttpMethod.GET},\n                authLevel = AuthorizationLevel.FUNCTION,\n                route = \"\")\n                HttpRequestMessage<Optional<String>> request,\n            @SQLInput(\n                name = \"result\",\n                commandText = \"SELECT * FROM $object$\",\n                commandType = \"Text\",\n                connectionStringSetting = \"$SqlConnectionString$\")\n                Object[] result) {\n\n        return request.createResponseBuilder(HttpStatus.OK).header(\"Content-Type\", \"application/json\").body(result).build();\n    }\n}"
    }
  },
  {
    "id": "DaprPublishOutputBinding-Java",
    "metadata": {
      "name": "DaprPublishOutputBinding",
      "description": "$daprPublishOutputBinding_description",
      "defaultFunctionName": "DaprPublishOutputBinding",
      "language": "Java"
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "schedule": "*/10 * * * * *",
          "name": "myTimer",
          "type": "timerTrigger",
          "direction": "in"
        },
        {
          "type": "daprPublish",
          "direction": "out",
          "name": "pubEvent",
          "pubsubname": "pubsub",
          "topic": "B"
        },
        {
          "type": "daprTopicTrigger",
          "pubsubname": "pubsub",
          "topic": "A",
          "name": "subEvent",
          "direction": "in",
          "dataType": "string"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.logging.Logger;\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.microsoft.azure.functions.ExecutionContext;\r\nimport com.microsoft.azure.functions.OutputBinding;\r\nimport com.microsoft.azure.functions.annotation.FunctionName;\r\nimport com.microsoft.azure.functions.annotation.TimerTrigger;\r\nimport com.microsoft.azure.functions.dapr.annotation.DaprPublishOutput;\r\nimport com.microsoft.azure.functions.dapr.annotation.DaprTopicTrigger;\r\n\r\npublic class $className$ {\r\n    /*\r\n    Visit https://aka.ms/azure-functions-dapr to learn how to use the Dapr extension.\r\n    These tasks should be completed prior to running :\r\n      1. Install Dapr\r\n      2. Change the bundle name in host.json to \"Microsoft.Azure.Functions.ExtensionBundle.Preview\" and the version to \"[4.*, 5.0.0)\"\r\n    Start function app with Dapr: dapr run --app-id functionapp --app-port 3001 --dapr-http-port 3501 -- func host start\r\n    Function will be invoked by Timer trigger and publish messages to message bus.\r\n    */\r\n    @FunctionName(\"DaprPublishOutputBindingFunc\")\r\n    public String run(\r\n            @TimerTrigger(name = \"keepAliveTrigger\", schedule = \"*/10 * * * * *\") String timerInfo,\r\n            @DaprPublishOutput(\r\n                pubSubName = \"pubsub\",\r\n                topic = \"A\")\r\n            OutputBinding<String> payload,\r\n            final ExecutionContext context) {\r\n        context.getLogger().info(\"Java DaprPublish output binding function processed a request.\");\r\n\r\n        String data = \"Invoked by Timer trigger: Hello, World! The time is \" + LocalDateTime.now();\r\n        String pubsubPayload = String.format(\"{\\\"payload\\\":\\\" %s \\\"}\", data);  \r\n\r\n        payload.setValue(pubsubPayload);\r\n\r\n        return pubsubPayload;\r\n    }\r\n\r\n    /*\r\n    If you want to act on the published message on topic A, please uncomment below Azure function to receive message published on topic A, \r\n    this function will log the received message on topic A\r\n    */\r\n    \r\n    // @FunctionName(\"DaprTopicTriggerTest\")\r\n    // public void runDaprTopicTriggerTest(\r\n    //     @DaprTopicTrigger(\r\n    //         pubSubName = \"pubsub\",\r\n    //         topic = \"A\")\r\n    //         String request,\r\n    //     final ExecutionContext context) throws JsonProcessingException {\r\n\r\n    //     Logger logger = context.getLogger();\r\n        \r\n    //     logger.info(\"Java Dapr Topic Trigger function processed a request from the Dapr Runtime.\");\r\n\r\n    //     // Get the CloudEvent data from the request body as a JSON string\r\n    //     ObjectMapper objectMapper = new ObjectMapper();\r\n    //     JsonNode jsonNode = objectMapper.readTree(request).get(\"data\");\r\n    //     String serializedJson = objectMapper.writeValueAsString(jsonNode);\r\n    //     logger.info(\"Topic A received a message: \" + serializedJson);\r\n    // }\r\n}"
    }
  },
  {
    "id": "DaprServiceInvocationTrigger-Java",
    "metadata": {
      "name": "DaprServiceInvocationTrigger",
      "description": "$daprServiceInvocationTrigger_description",
      "defaultFunctionName": "DaprServiceInvocationTriggerJava",
      "language": "Java"
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "daprServiceInvocationTrigger",
          "name": "payload",
          "direction": "in"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\r\n\r\nimport java.util.Optional;\r\nimport java.util.logging.Logger;\r\nimport com.microsoft.azure.functions.ExecutionContext;\r\nimport com.microsoft.azure.functions.HttpMethod;\r\nimport com.microsoft.azure.functions.HttpRequestMessage;\r\nimport com.microsoft.azure.functions.HttpResponseMessage;\r\nimport com.microsoft.azure.functions.HttpStatus;\r\nimport com.microsoft.azure.functions.OutputBinding;\r\nimport com.microsoft.azure.functions.annotation.AuthorizationLevel;\r\nimport com.microsoft.azure.functions.annotation.FunctionName;\r\nimport com.microsoft.azure.functions.annotation.HttpTrigger;\r\nimport com.microsoft.azure.functions.dapr.annotation.DaprServiceInvocationTrigger;\r\nimport com.microsoft.azure.functions.dapr.annotation.DaprInvokeOutput;\r\n\r\npublic class $className$ {\r\n    /*\r\n    Visit https://aka.ms/azure-functions-dapr to learn how to use the Dapr extension.\r\n    These tasks should be completed prior to running :\r\n      1. Install Dapr\r\n      2. Change the bundle name in host.json to \"Microsoft.Azure.Functions.ExtensionBundle.Preview\" and the version to \"[4.*, 5.0.0)\"\r\n    Start function app with Dapr: dapr run --app-id functionapp --app-port 3001 --dapr-http-port 3501 -- func host start\r\n    Invoke function app by dapr cli in cmd prompt: dapr invoke --app-id functionapp --method {yourFunctionName}  --data '{ \\\"data\\\": {\\\"value\\\": { \\\"orderId\\\": \\\"41\\\" } } }'\r\n    Invoke function app by http trigger: \r\n    curl 'http://localhost:7071/api/invoke/functionapp/{yourFunctionName}' `\r\n    --header 'Content-Type: application/json' `\r\n    --data '{\r\n        \"data\": {\r\n            \"value\": {\r\n                \"orderId\": \"41\"\r\n            }\r\n        }\r\n    }'\r\n    <param name=\"payload\">Payload of dapr service invocation trigger.</param>\r\n    <param name=\"functionContext\">Function context.</param>\r\n    */\r\n    @FunctionName(\"DaprServiceInvocationTriggerFunc\")\r\n    public void run(\r\n        @DaprServiceInvocationTrigger(\r\n            methodName = \"DaprServiceInvocationTriggerFunc\") String payload,\r\n        final ExecutionContext context) {\r\n\r\n        Logger logger = context.getLogger();\r\n        logger.info(\"Azure function triggered by Dapr Service Invocation Trigger.\");\r\n        logger.info(\"Dapr service invocation trigger payload: \" + payload);\r\n    }\r\n\r\n    /*\r\n    Azure function with Dapr Invoke output binding.\r\n     */\r\n    @FunctionName(\"DaprInvokeOuputBinding\")\r\n    public HttpResponseMessage runDaprInvokeOuput(\r\n            @HttpTrigger(\r\n                route = \"invoke/{appId}/{methodName}\",\r\n                name = \"req\",\r\n                methods = {HttpMethod.GET, HttpMethod.POST},\r\n                authLevel = AuthorizationLevel.ANONYMOUS)\r\n                HttpRequestMessage<Optional<String>> request,\r\n            @DaprInvokeOutput(\r\n                appId = \"{appId}\", \r\n                methodName = \"{methodName}\", \r\n                httpVerb = \"POST\") \r\n                OutputBinding<String> output,\r\n            final ExecutionContext context) {\r\n        context.getLogger().info(\"Java HTTP trigger processed a request.\");\r\n\r\n        // Parse query parameter\r\n        final String query = request.getQueryParameters().get(\"name\");\r\n        final String body = request.getBody().orElse(query);\r\n\r\n        String jsoString = String.format(\"{\\\"body\\\":%s}\", body);\r\n        context.getLogger().info(jsoString);\r\n        output.setValue(jsoString);\r\n\r\n        return request.createResponseBuilder(HttpStatus.OK).body(jsoString).build();\r\n    }\r\n}"
    }
  },
  {
    "id": "DaprTopicTrigger-Java",
    "metadata": {
      "name": "DaprTopicTrigger",
      "description": "$daprTopicTrigger_description",
      "defaultFunctionName": "DaprTopicTriggerJava",
      "language": "Java"
    },
    "function": {
      "disabled": false,
      "bindings": [
        {
          "type": "daprTopicTrigger",
          "pubsubname": "messagebus",
          "topic": "A",
          "name": "subEvent",
          "direction": "in",
          "dataType": "string"
        },
        {
          "type": "daprState",
          "stateStore": "statestore",
          "direction": "out",
          "name": "value",
          "key": "product"
        }
      ]
    },
    "files": {
      "function.java": "package $packageName$;\r\n\r\nimport com.fasterxml.jackson.core.JsonProcessingException;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.microsoft.azure.functions.ExecutionContext;\r\nimport com.microsoft.azure.functions.OutputBinding;\r\nimport com.microsoft.azure.functions.annotation.FunctionName;\r\nimport com.microsoft.azure.functions.dapr.annotation.DaprStateOutput;\r\nimport com.microsoft.azure.functions.dapr.annotation.DaprTopicTrigger;\r\n\r\n\r\npublic class $className$ {\r\n\r\n    /*\r\n    Visit https://aka.ms/azure-functions-dapr to learn how to use the Dapr extension.\r\n    These tasks should be completed prior to running :\r\n      1. Install Dapr\r\n      2. Change the bundle name in host.json to \"Microsoft.Azure.Functions.ExtensionBundle.Preview\" and the version to \"[4.*, 5.0.0)\"\r\n    Start function app with Dapr: dapr run --app-id functionapp --app-port 3001 --dapr-http-port 3501 -- mvn azure-functions:run\r\n    Invoke function app in cmd promt: dapr publish --pubsub pubsub --publish-app-id functionapp --topic Q --data '{\\\"value\\\": { \\\"orderId\\\": \\\"42\\\" } }'\r\n    */\r\n    @FunctionName(\"DaprTopicTriggerFunc\")\r\n    public String run(\r\n        @DaprTopicTrigger(\r\n            pubSubName = \"pubsub\",\r\n            topic = \"Q\")\r\n            String request,\r\n        @DaprStateOutput(\r\n            stateStore = \"statestore\",\r\n            key = \"product\")\r\n        OutputBinding<String> product,\r\n        final ExecutionContext context) throws JsonProcessingException {\r\n        context.getLogger().info(\"Java DaprTopic trigger with DaprState output binding function processed a request from the Dapr Runtime.\");\r\n\r\n        // Get the CloudEvent data from the request body as a JSON string\r\n        ObjectMapper objectMapper = new ObjectMapper();\r\n        JsonNode jsonNode = objectMapper.readTree(request).get(\"data\");\r\n        String serializedJson = objectMapper.writeValueAsString(jsonNode);\r\n        product.setValue(serializedJson);\r\n\r\n        return serializedJson;\r\n    }\r\n}"
    }
  }
]