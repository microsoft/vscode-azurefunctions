[{"id":"HttpTrigger-Java","metadata":{"name":"HttpTrigger","description":"$HttpTrigger_description","defaultFunctionName":"httpTriggerJava","language":"Java","userPrompt":["authLevel"]},"function":{"disabled":false,"bindings":[{"authLevel":"function","type":"httpTrigger","direction":"in","name":"req","methods":["get","post"]},{"type":"http","direction":"out","name":"res"}]},"files":{"function.java":"package $packageName$;\n\nimport java.util.*;\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with HTTP Trigger.\n */\npublic class $className$ {\n    /**\n     * This function listens at endpoint \"/api/$functionName$\". Two ways to invoke it using \"curl\" command in bash:\n     * 1. curl -d \"HTTP Body\" {your host}/api/$functionName$\n     * 2. curl {your host}/api/$functionName$?name=HTTP%20Query\n     */\n    @FunctionName(\"$functionName$\")\n    public HttpResponseMessage run(\n            @HttpTrigger(name = \"req\", methods = {HttpMethod.GET, HttpMethod.POST}, authLevel = AuthorizationLevel.$authLevel$) HttpRequestMessage<Optional<String>> request,\n            final ExecutionContext context) {\n        context.getLogger().info(\"Java HTTP trigger processed a request.\");\n\n        // Parse query parameter\n        String query = request.getQueryParameters().get(\"name\");\n        String name = request.getBody().orElse(query);\n\n        if (name == null) {\n            return request.createResponseBuilder(HttpStatus.BAD_REQUEST).body(\"Please pass a name on the query string or in the request body\").build();\n        } else {\n            return request.createResponseBuilder(HttpStatus.OK).body(\"Hello, \" + name).build();\n        }\n    }\n}\n"}},{"id":"BlobTrigger-Java","metadata":{"name":"BlobTrigger","description":"$BlobTrigger_description","defaultFunctionName":"blobTriggerJava","language":"Java","userPrompt":["connection","path"]},"function":{"disabled":false,"bindings":[{"name":"myBlob","type":"blobTrigger","direction":"in","path":"samples-workitems","connection":""}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Azure Blob trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new or updated blob is detected at the specified path. The blob contents are provided as input to this function.\n     */\n    @FunctionName(\"$functionName$\")\n    @StorageAccount(\"$connection$\")\n    public void run(\n        @BlobTrigger(name = \"content\", path = \"$path$/{name}\", dataType = \"binary\") byte[] content,\n        @BindingName(\"name\") String name,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Blob trigger function processed a blob. Name: \" + name + \"\\n  Size: \" + content.length + \" Bytes\");\n    }\n}\n"}},{"id":"QueueTrigger-Java","metadata":{"name":"QueueTrigger","description":"$QueueTrigger_description","defaultFunctionName":"queueTriggerJava","language":"Java","userPrompt":["connection","queueName"]},"function":{"disabled":false,"bindings":[{"name":"myQueueItem","type":"queueTrigger","direction":"in","queueName":"queue-items","connection":""}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Azure Storage Queue trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new message is received at the specified path. The message contents are provided as input to this function.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @QueueTrigger(name = \"message\", queueName = \"$queueName$\", connection = \"$connection$\") String message,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Queue trigger function processed a message: \" + message);\n    }\n}\n"}},{"id":"TimerTrigger-Java","metadata":{"name":"TimerTrigger","description":"$TimerTrigger_description","defaultFunctionName":"timerTriggerJava","language":"Java","userPrompt":["schedule"]},"function":{"disabled":false,"bindings":[{"name":"myTimer","type":"timerTrigger","direction":"in","schedule":"0 */5 * * * *"}]},"files":{"function.java":"package $packageName$;\n\nimport java.time.*;\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Timer trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked periodically according to the specified schedule.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @TimerTrigger(name = \"timerInfo\", schedule = \"$schedule$\") String timerInfo,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Timer trigger function executed at: \" + LocalDateTime.now());\n    }\n}\n"}},{"id":"EventGridTrigger-Java","metadata":{"name":"EventGridTrigger","description":"$EventGridTrigger_description","defaultFunctionName":"eventGridTriggerJava","language":"Java","userPrompt":[]},"function":{"disabled":false,"bindings":[{"type":"eventGridTrigger","name":"eventGridEvent","direction":"in"}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Event Grid trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when an event is received from Event Grid.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(@EventGridTrigger(name = \"eventGridEvent\") String message, final ExecutionContext context) {\n        context.getLogger().info(\"Java Event Grid trigger function executed.\");\n        context.getLogger().info(message);\n    }\n}\n"}},{"id":"EventHubTrigger-Java","metadata":{"name":"EventHubTrigger","description":"$EventHubTrigger_description","defaultFunctionName":"eventHubTriggerJava","language":"Java","userPrompt":["connection","eventHubName","consumerGroup"]},"function":{"disabled":false,"bindings":[{"type":"eventHubTrigger","name":"myEventHubMessage","direction":"in","eventHubName":"samples-workitems","connection":"","consumerGroup":"$Default"}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\nimport java.util.*;\n\n/**\n * Azure Functions with Event Hub trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when an event is received from Event Hub.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @EventHubTrigger(name = \"message\", eventHubName = \"$eventHubName$\", connection = \"$connection$\", consumerGroup = \"$consumerGroup$\", cardinality = Cardinality.MANY) List<String> message,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Event Hub trigger function executed.\");\n        context.getLogger().info(\"Length:\" + message.size());\n        message.forEach(singleMessage -> context.getLogger().info(singleMessage));\n    }\n}\n"}},{"id":"CosmosDBTrigger-Java","metadata":{"name":"CosmosDBTrigger","description":"$CosmosDBTrigger_description","defaultFunctionName":"cosmosDBTriggerJava","language":"Java","userPrompt":["connectionStringSetting","databaseName","collectionName","leaseCollectionName","createLeaseCollectionIfNotExists"]},"function":{"bindings":[{"type":"cosmosDBTrigger","name":"documents","direction":"in","leaseCollectionName":"leases"}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Cosmos DB trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when there are inserts or updates in the specified database and collection.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @CosmosDBTrigger(\n            name = \"items\",\n            databaseName = \"$databaseName$\",\n            collectionName = \"$collectionName$\",\n            leaseCollectionName=\"$leaseCollectionName$\",\n            connectionStringSetting = \"$connectionStringSetting$\",\n            createLeaseCollectionIfNotExists = $createLeaseCollectionIfNotExists$\n        )\n        Object[] items,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Cosmos DB trigger function executed.\");\n        context.getLogger().info(\"Documents count: \" + items.length);\n    }\n}\n"}},{"id":"ServiceBusQueueTrigger-Java","metadata":{"name":"ServiceBusQueueTrigger","description":"$ServiceBusQueueTrigger_description","defaultFunctionName":"ServiceBusQueueTriggerJava","language":"Java","userPrompt":["connection","queueName"]},"function":{"disabled":false,"bindings":[{"name":"mySbMsg","type":"serviceBusTrigger","direction":"in","queueName":"myinputqueue","connection":""}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Service Bus Trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new message is received at the Service Bus Queue.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n            @ServiceBusQueueTrigger(name = \"message\", queueName = \"$queueName$\", connection = \"$connection$\") String message,\n            final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Service Bus Queue trigger function executed.\");\n        context.getLogger().info(message);\n    }\n}\n"}},{"id":"ServiceBusTopicTrigger-Java","metadata":{"name":"ServiceBusTopicTrigger","description":"$ServiceBusTopicTrigger_description","defaultFunctionName":"ServiceBusTopicTriggerJava","language":"Java","userPrompt":["connection","topicName","subscriptionName"]},"function":{"disabled":false,"bindings":[{"name":"mySbMsg","type":"serviceBusTrigger","direction":"in","topicName":"mytopic","subscriptionName":"mysubscription","connection":""}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.annotation.*;\nimport com.microsoft.azure.functions.*;\n\n/**\n * Azure Functions with Service Topic Trigger.\n */\npublic class $className$ {\n    /**\n     * This function will be invoked when a new message is received at the Service Bus Topic.\n     */\n    @FunctionName(\"$functionName$\")\n    public void run(\n        @ServiceBusTopicTrigger(\n            name = \"message\",\n            topicName = \"$topicName$\",\n            subscriptionName = \"$subscriptionName$\",\n            connection = \"$connection$\"\n        )\n        String message,\n        final ExecutionContext context\n    ) {\n        context.getLogger().info(\"Java Service Bus Topic trigger function executed.\");\n        context.getLogger().info(message);\n    }\n}"}},{"id":"RabbitMQTrigger-Java","metadata":{"name":"RabbitMQTrigger","description":"$RabbitMQTrigger_description","defaultFunctionName":"rabbitMQTriggerJava","language":"Java","userPrompt":["connectionStringSetting","queueName"]},"function":{"disabled":false,"bindings":[{"name":"myQueueItem","type":"rabbitMqTrigger","direction":"in","queueName":"","connectionStringSetting":""}]},"files":{"function.java":"package $packageName$;\n\nimport com.microsoft.azure.functions.ExecutionContext;\nimport com.microsoft.azure.functions.annotation.FunctionName;\nimport com.microsoft.azure.functions.rabbitmq.annotation.RabbitMQTrigger;\n\n/**\n * Azure Functions with RabbitMQ Trigger.\n *\n * This function will be invoked when a new message is received in RabbitMQ\n * Please add com.microsoft.azure.functions:azure-functions-java-library-rabbitmq to your project dependencies\n * You may get the example and latest version in https://search.maven.org/artifact/com.microsoft.azure.functions/azure-functions-java-library-rabbitmq\n * \n */\npublic class $className$ {\n    @FunctionName(\"$functionName$\")\n    public void run(\n            @RabbitMQTrigger(\n                    connectionStringSetting = \"$connectionStringSetting$\",\n                    queueName = \"$queueName$\"\n            ) String input,\n            final ExecutionContext context) {\n        context.getLogger().info(\"Java RabbitMQ trigger processed a request.\" + input);\n    }\n}"}}]
