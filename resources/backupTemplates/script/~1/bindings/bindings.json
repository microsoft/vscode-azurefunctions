{
  "$schema": "<TBD>",
  "contentVersion": "2016-03-04-alpha",
  "variables": {
    "storageConnStringLabel": "$variables_storageConnStringLabel",
    "appSettingsHelp": "$variables_appSettingsHelp",
    "selectConnection": "$variables_selectConnection",
    "parameterName": "$variables_parameterName",
    "paramNameLabel": "$variables_paramNameLabel",
    "paramNameInputHelp": "$variables_paramNameInputHelp",
    "paramNameOutputHelp": "$variables_paramNameOutputHelp",
    "apiHubTableDataSetLabel": "$variables_apiHubTableDataSetLabel",
    "apiHubTableDataSetHelp": "$variables_apiHubTableDataSetHelp",
    "apiHubTableNameLabel": "$variables_apiHubTableNameLabel",
    "apiHubTableHelp": "$variables_apiHubTableHelp",
    "apiHubTableEntityLabel": "$variables_apiHubTableEntityLabel",
    "apiHubTableEntityHelp": "$variables_apiHubTableEntityHelp",
    "apiHubTableConnectionLabel": "$variables_apiHubTableConnectionLabel",
    "apiHubTableConnectionHelp": "$variables_apiHubTableConnectionHelp"
  },
  "bindings": [
    {
      "type": "timerTrigger",
      "displayName": "$timerTrigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": true,
      "documentation": "## Settings for timer trigger\r\n\r\nThe settings provide a schedule expression. For example, the following schedule runs the function every minute:\r\n\r\n - `schedule`: Cron tab expression which defines schedule.The cron expression are evaluated against UTC time zone.\r\n - `name`: The variable name used in function code for the TimerTrigger. \r\n - `type`: must be *timerTrigger*\r\n - `direction`: must be *in*\r\n\r\nThe timer trigger handles multi-instance scale-out automatically: only a single instance of a particular timer function will be running across all instances.\r\n\r\n## Format of schedule expression\r\n\r\nThe schedule expression is a [CRON expression](http://en.wikipedia.org/wiki/Cron#CRON_expression) that includes 6 fields:  `{second} {minute} {hour} {day} {month} {day of the week}`. \r\n\r\nNote that many of the cron expressions you find online omit the {second} field, so if you copy from one of those you'll have to adjust for the extra field. \r\n\r\nHere are some other schedule expression examples:\r\n\r\nTo trigger once every 5 minutes:\r\n\r\n```json\r\n\"schedule\": \"0 */5 * * * *\"\r\n```\r\n\r\nTo trigger once at the top of every hour:\r\n\r\n```json\r\n\"schedule\": \"0 0 * * * *\",\r\n```\r\n\r\nTo trigger once every two hours:\r\n\r\n```json\r\n\"schedule\": \"0 0 */2 * * *\",\r\n```\r\n\r\nTo trigger once every hour from 9 AM to 5 PM:\r\n\r\n```json\r\n\"schedule\": \"0 0 9-17 * * *\",\r\n```\r\n\r\nTo trigger At 9:30 AM every day:\r\n\r\n```json\r\n\"schedule\": \"0 30 9 * * *\",\r\n```\r\n\r\nTo trigger At 9:30 AM every weekday:\r\n\r\n```json\r\n\"schedule\": \"0 30 9 * * 1-5\",\r\n```\r\n\r\n## Timer trigger C# code example\r\n\r\nThis C# code example writes a single log each time the function is triggered.\r\n\r\n```csharp\r\npublic static void Run(TimerInfo myTimer, TraceWriter log)\r\n{\r\n    log.Info($\"C# Timer trigger function executed at: {DateTime.Now}\");    \r\n}\r\n```\r\n\r\n## Timer trigger JavaScript example\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myTimer) {\r\n    if(myTimer.isPastDue)\r\n    {\r\n        context.log('JavaScript is running late!');\r\n    }\r\n    context.log(\"Timer last triggered at \" + myTimer.last);\r\n    context.log(\"Timer triggered at \" + myTimer.next);\r\n    \r\n    context.done();\r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "myTimer",
          "required": true,
          "label": "$timerTrigger_name_label",
          "help": "$timerTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "schedule",
          "value": "string",
          "defaultValue": "0 * * * * *",
          "required": true,
          "label": "$timerTrigger_schedule_label",
          "help": "$timerTrigger_schedule_help",
          "validators": [
            {
              "expression": "^(\\*|((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?)(,((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?)(,((([1-5]\\d)|\\d)(\\-(([1-5]\\d)|\\d)(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|(((1\\d)|(2[0-3])|\\d)(\\-((1\\d)|(2[0-3])|\\d)(\\/\\d+)?)?)(,(((1\\d)|(2[0-3])|\\d)(\\-((1\\d)|(2[0-3])|\\d)(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|((([1-2]\\d)|(3[0-1])|[1-9])(\\-(([1-2]\\d)|(3[0-1])|[1-9])(\\/\\d+)?)?)(,((([1-2]\\d)|(3[0-1])|[1-9])(\\-(([1-2]\\d)|(3[0-1])|[1-9])(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|(([A-Za-z]+|(1[0-2])|[1-9])(\\-([A-Za-z]+|(1[0-2])|[1-9])(\\/\\d+)?)?)(,(([A-Za-z]+|(1[0-2])|[1-9])(\\-([A-Za-z]+|(1[0-2])|[1-9])(\\/\\d+)?)?))*)(\\/\\d+)? (\\*|(([A-Za-z]+|[0-6])(\\-([A-Za-z]+|[0-6])(\\/\\d+)?)?)(,(([A-Za-z]+|[0-6])(\\-([A-Za-z]+|[0-6])(\\/\\d+)?)?))*)(\\/\\d+)?$",
              "errorText": "$timerTrigger_schedule_errorText"
            }
          ]
        }
      ]
    },
    {
      "type": "eventHubTrigger",
      "displayName": "$eventHubTrigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": false,
      "documentation": "#### Settings for Event Hub trigger binding\r\n\r\nThe settings for an Azure Event Hub trigger specifies the following properties:\r\n\r\n- `type` : Must be set to *eventHubTrigger*.\r\n- `name` : The variable name used in function code for the event hub message. \r\n- `direction` : Must be set to *in*. \r\n- `path` : The name of the event hub.\r\n- `connection` : The name of an app setting that contains the connection string to the namespace that the event hub resides in. Copy this connection string by clicking the **Connection Information** button for the namespace, not the event hub itself.  This connection string must have at least read permissions to activate the trigger.\r\n- `cardinality` : Cardinality of the trigger input. Choose 'One' if the input is a single message or 'Many' if the input is an array of messages. 'Many' is the default if unspecified.\r\n\r\n#### Azure Event Hub trigger C# example\r\n \r\n\tusing System;\r\n\t\r\n\tpublic static void Run(string myEventHubMessage, TraceWriter log)\r\n\t{\r\n\t    log.Info($\"C# Event Hub trigger function processed a message: {myEventHubMessage}\");\r\n\t}\r\n\r\n#### Azure Event Hub trigger JavaScript example\r\n\r\n\tmodule.exports = function (context, eventHubMessages) {\r\n\t\tcontext.log(`JavaScript eventhub trigger function called for message array ${eventHubMessages}`);\r\n\t\t\r\n\t\teventHubMessages.forEach(message => {\r\n\t\t\tcontext.log(`Processed message ${message}`);\r\n\t\t});\r\n\r\n\t\tcontext.done();\r\n\t};\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "myEventHubMessage",
          "required": true,
          "label": "$eventHubTrigger_name_label",
          "help": "$eventHubTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "EventHub",
          "required": true,
          "label": "$eventHubTrigger_connection_label",
          "help": "$eventHubTrigger_connection_help",
          "placeholder": "[variables('selectConnection')]"
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "myeventhub",
          "required": true,
          "label": "$eventHubOut_path_label",
          "help": "$eventHubTrigger_path_help",
          "validators": [
            {
              "expression": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}[a-zA-Z0-9]$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$eventHubTrigger_path_errorText"
            }
          ]
        },
        {
          "name": "consumerGroup",
          "value": "string",
          "defaultValue": "$Default",
          "required": false,
          "label": "$eventHubTrigger_consumerGroup_label",
          "help": "$eventHubTrigger_consumerGroup_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}[a-zA-Z0-9]$)|^\\$Default$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$eventHubTrigger_consumerGroup_errorText"
            }
          ]
        },
        {
          "name": "cardinality",
          "value": "enum",
          "required": false,
          "defaultValue": "many",
          "enum": [
            {
              "value": "one",
              "display": "One"
            },
            {
              "value": "many",
              "display": "Many"
            }
          ],
          "label": "$eventHubTrigger_cardinality_label",
          "help": "$eventHubTrigger_cardinality_help"
        }
      ]
    },
    {
      "type": "eventHub",
      "displayName": "$eventHubOut_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "actions": [
        {
          "template": "EventHubTrigger",
          "binding": "eventHubTrigger",
          "settings": [
            "connection",
            "path"
          ]
        }
      ],
      "documentation": "#### Settings for Event Hub output binding\r\n\r\nThe settings for an Azure Event Hub output binding specifies the following properties:\r\n\r\n- `type` : Must be set to *eventHub*.\r\n- `name` : The variable name used in function code for the event hub message. \r\n- `path` : The name of the event hub.\r\n- `connection` : The name of an app setting that contains the connection string to the namespace that the event hub resides in. Copy this connection string by clicking the **Connection Information** button for the namespace, not the event hub itself.  This connection string must have send permissions to send the message to the Event Hub stream.\r\n- `direction` : Must be set to *out*. \r\n\r\n#### Azure Event Hub C# code example for output binding\r\n\r\nThis example uses a Timer Trigger input, but Event Hubs output can work with any trigger.\r\n \r\n\tusing System;\r\n\t\r\n\tpublic static void Run(TimerInfo myTimer, out string outputEventHubMessage, TraceWriter log)\r\n\t{\r\n\t    String msg = $\"TimerTriggerCSharp1 executed at: {DateTime.Now}\";\r\n\t\r\n\t    log.Verbose(msg);   \r\n\t    \r\n\t    outputEventHubMessage = msg;\r\n\t}\r\n\r\n#### Azure Event Hub JavaScript code example for output binding\r\n\r\nThis example uses a Timer Trigger input, but Event Hubs output can work with any trigger.\r\n \r\n\tmodule.exports = function (context, myTimer) {\r\n\t    var timeStamp = new Date().toISOString();\r\n\t    \r\n\t    if(myTimer.isPastDue)\r\n\t    {\r\n\t        context.log('TimerTriggerJS1 is running late!');\r\n\t    }\r\n\r\n\t    context.log('TimerTriggerJS1 function ran!', timeStamp);   \r\n\t    \r\n\t    context.bindings.outputEventHubMessage = \"TimerTriggerJS1 ran at : \" + timeStamp;\r\n\t\r\n\t    context.done();\r\n\t};\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputEventHubMessage",
          "required": true,
          "label": "$eventHubOut_name_label",
          "help": "$eventHubOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "EventHub",
          "required": true,
          "label": "$eventHubOut_connection_label",
          "help": "$eventHubOut_connection_help",
          "placeholder": "[variables('selectConnection')]"
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "outeventhub",
          "required": true,
          "label": "$eventHubOut_path_label",
          "help": "$eventHubOut_path_help",
          "validators": [
            {
              "expression": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}[a-zA-Z0-9]$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$eventHubOut_path_errorText"
            }
          ]
        }
      ]
    },
    {
      "type": "queue",
      "displayName": "$queueOut_displayName",
      "direction": "out",
      "enabledInTryMode": true,
      "actions": [
        {
          "template": "QueueTrigger",
          "binding": "queueTrigger",
          "settings": [
            "queueName",
            "connection"
          ]
        }
      ],
      "documentation": "#### Settings for storage queue output binding\r\n\r\nThe settings specifies the following properties.\r\n\r\n- `name` : The variable name used in function code for the queue or the queue message. \r\n- `queueName` : The name of the queue. For queue naming rules, see [Naming Queues and Metadata](https://msdn.microsoft.com/library/dd179349.aspx).\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the trigger will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *queue*.\r\n- `direction` : Must be set to *out*. \r\n\r\n#### C# types for Storage Queue\r\n\r\nThe `queue` binding can serialize the following types to a queue message:\r\n\r\n* Object (`out T` in C#, creates a message with a null object if the parameter is null when the function ends)\r\n* String (`out string` in C#, creates queue message if parameter value is non-null when the function ends)\r\n* Byte array (`out byte[]` in C#, works like string) \r\n* `out CloudQueueMessage` (C#, works like string) \r\n\r\nIn C# you can also bind to `ICollector<T>` or `IAsyncCollector<T>` where `T` is one of the supported types.\r\n\r\n#### C# Example for Storage Queue\r\n\r\nThis C# code example writes a single output queue message for each input queue message.\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, out string myOutputQueueItem, TraceWriter log)\r\n{\r\n    myOutputQueueItem = myQueueItem + \"(next step)\";\r\n}\r\n```\r\n\r\nThis C# code example writes multiple messages by using  `ICollector<T>` (use `IAsyncCollector<T>` in an async function):\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, ICollector<string> myQueue, TraceWriter log)\r\n{\r\n    myQueue.Add(myQueueItem + \"(step 1)\");\r\n    myQueue.Add(myQueueItem + \"(step 2)\");\r\n}\r\n```\r\n\r\n#### JavaScript example for Storage Queue\r\n\r\nJavaScript supports outputing a single object/string or an array of objects/strings. You access your bindings on `context.bindings` object.\r\n\r\nThis shows outputing a single item:\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myQueueItem) {\r\n    context.bindings.output = \"Azure Functions are awesome!\"\r\n    //objects also work:\r\n    //context.bindings.output = { \"name\": \"world\"}\r\n    context.done();\r\n}\r\n```\r\n\r\nThis shows outputing a collection of items:\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myQueueItem) {\r\n    context.bindings.output = [\r\n        {\r\n            \"name\":\"world\"\r\n        },\r\n        \"Azure Functions are awesome!\"\r\n    ]\r\n    context.done();\r\n}\r\n```\r\n\r\n#### Batch File Bindings for Storage Queue\r\n\r\nWhen you define `queue` output bindings in a function each binding will be available to the batch via pre-assigned paths to temporary disk locations. You can inspect the values of these paths by using the `SET` command in your function and viewing the results in the logs, however these files are transient and only available during the scope of the function execution. Each variable defined will be accessible by the same name you provide in the Azure Functions interface.\r\n\r\nFor instance, an output binding you define as `outputQueueItem` will be created for you and populated with a temporary file path. You can access the path using the variable name surrounded by `%` characters such as `%outputQueueItem%`. \r\n\r\nThe following code will test for the presence of the `name` parameter on the querystring of the request, and pipe that value to the `outputQueueItem` file, or return instructions by piping text to the response (in the `res` output location) if the `name` parameter is missing.\r\n\r\n````\r\nIF DEFINED req_query_name (\r\n\techo Hello %req_query_name%! > %outputQueueItem%\r\n\techo The greeting was sent to the queue. > %res%\r\n) ELSE (\r\n\techo Please pass a name on the query string > %res%\r\n)\r\n````\r\n\r\nThe contents of the file is then used by the runtime as the body of the message that is sent to the queue.\r\n\r\nTo pass additional values to the queue you can append to the file using the `>>` directive. \r\n\r\n````\r\necho This text is the first value > %outputQueueItem%\r\necho This text will be appended as a second line >> %outputQueueItem%\r\necho Careful! This line will overwrite previous data > %outputQueueItem%\r\n````\r\n\r\nAzure Functions do not currently provide a facility for serialization of data from a batch file (such as for JSON) so you need to take care of these operations through features natively available to you in batch file syntax. By echoing data and appending to the end of a file, you'll simply be pushing new lines of text to a text file. The values, along with the CRLF characters, will be passed as a single entry to the target queue.\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputQueueItem",
          "required": true,
          "label": "$queueOut_name_label",
          "help": "$queueOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "queueName",
          "value": "string",
          "defaultValue": "outqueue",
          "required": true,
          "label": "$queueOut_queueName_label",
          "help": "$queueOut_queueName_help",
          "validators": [
            {
              "expression": "^[0-9a-z][a-z0-9-]{1,61}[0-9a-z]$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$queueOut_queueName_errorText"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "Storage",
          "required": true,
          "label": "[variables('storageConnStringLabel')]",
          "help": "[variables('appSettingsHelp')]",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "queueTrigger",
      "displayName": "$queueTrigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": true,
      "documentation": "#### Settings for storage queue trigger\r\n\r\n- `name` : The variable name used in function code for the queue or the queue message. \r\n- `queueName` : The name of the queue to poll. For queue naming rules, see [Naming Queues and Metadata](https://msdn.microsoft.com/library/dd179349.aspx).\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the trigger will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *queueTrigger*.\r\n- `direction` : Must be set to *in*. \r\n\r\n\r\n#### Additional metadata for Storage Queue trigger\r\n\r\nYou can get queue metadata in your function by using these variable names:\r\n\r\n* ExpirationTime\r\n* InsertionTime\r\n* NextVisibleTime\r\n* Id\r\n* PopReceipt\r\n* DequeueCount\r\n* QueueTrigger (another way to retrieve the queue message text as a string)\r\n\r\n#### C# types for Storage Queue trigger\r\n\r\nThe queue message can be deserialized to any of the following types:\r\n\r\n* Object (from JSON)\r\n* String\r\n* Byte array \r\n* `CloudQueueMessage` (C#) \r\n\r\n#### C# example for Storage Queue trigger\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, \r\n    DateTimeOffset expirationTime, \r\n    DateTimeOffset insertionTime, \r\n    DateTimeOffset nextVisibleTime,\r\n    string queueTrigger,\r\n    string id,\r\n    string popReceipt,\r\n    int dequeueCount,\r\n    TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\\n\" +\r\n        $\"queueTrigger={queueTrigger}\\n\" +\r\n        $\"expirationTime={expirationTime}\\n\" +\r\n        $\"insertionTime={insertionTime}\\n\" +\r\n        $\"nextVisibleTime={nextVisibleTime}\\n\" +\r\n        $\"id={id}\\n\" +\r\n        $\"popReceipt={popReceipt}\\n\" + \r\n        $\"dequeueCount={dequeueCount}\");\r\n}\r\n```\r\n\r\n#### JavaScript example for Storage Queue trigger\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myQueueItem) {\r\n    context.log('Dequeue Count: ' + context.bindingData.DequeueCount);\r\n\r\n    // JavaScript supports returning strings or objects for queues\r\n    if(typeof myQueueItem === 'string') {\r\n        context.log('Trigger was a string! - ' + myQueueItem);\r\n    } else if(typeof myQueueItem === 'object') {\r\n        context.log('Trigger was an object! - \\n' + JSON.stringify(myQueueItem, null, ' '));\r\n    }\r\n    context.done(); //finish execution\r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "myQueueItem",
          "required": true,
          "label": "$queueTrigger_name_label",
          "help": "$queueTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "queueName",
          "value": "string",
          "defaultValue": "myqueue",
          "required": true,
          "label": "$queueTrigger_queueName_label",
          "help": "$queueTrigger_queueName_help",
          "validators": [
            {
              "expression": "^[0-9a-z][a-z0-9-]{1,61}[0-9a-z]$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$queueTrigger_queueName_errorText"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "Storage",
          "required": true,
          "label": "[variables('storageConnStringLabel')]",
          "help": "[variables('appSettingsHelp')]",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "blob",
      "displayName": "$blobOut_displayName",
      "direction": "out",
      "enabledInTryMode": true,
      "actions": [
        {
          "template": "BlobTrigger",
          "binding": "blobTrigger",
          "settings": [
            "path",
            "connection"
          ]
        }
      ],
      "documentation": "#### Settings for a storage blob output binding\r\n\r\n- `name` : The variable name used in function code for the blob . \r\n- `path` : A path that specifies the container to write the blob to, and optionally a blob name pattern.\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the binding will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *blob*.\r\n- `direction` : Set to *out*. \r\n\r\n#### Blob input and output supported types\r\n\r\nThe `blob` binding can serialize or deserialize the following types in JavaScript or C# functions:\r\n\r\n* Object (`out T` in C# for output blob: creates a blob as null object if parameter value is null when the function ends)\r\n* String (`out string` in C# for output blob: creates a blob only if the string parameter is non-null when the function returns)\r\n\r\nIn C# functions, you can also bind to the following types:\r\n\r\n* `TextWriter`\r\n* `Stream`\r\n* `CloudBlobStream`\r\n* `ICloudBlob`\r\n* `CloudBlockBlob` \r\n* `CloudPageBlob` \r\n\r\n#### Blob output C# code example\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, string myInputBlob, out string myOutputBlob, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    myOutputBlob = myInputBlob;\r\n}\r\n```\r\n\r\n#### Blob output JavaScript example\r\n\r\n```JavaScript\r\nmodule.exports = function(context, trigger) {\r\n    context.bindings.output = { \"hello\":\"world\" }\r\n    context.done();\r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputBlob",
          "required": true,
          "label": "$blobOut_name_label",
          "help": "$blobOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "outcontainer/{rand-guid}",
          "required": true,
          "label": "$blobOut_path_label",
          "help": "$blobOut_path_help",
          "validators": [
            {
              "expression": "((^[a-z0-9](?:[a-z0-9]|(?:\\-(?!\\-))){1,61}[a-z0-9])|(^[{][a-zA-Z0-9]{1,126}[}])|(^[%][a-zA-Z0-9]{1,126}[%]))[\\/](\\S){0,1023}[^\\/]$|(^[{][a-zA-Z0-9]{1,126}[}]$)|(^[%][a-zA-Z0-9]{1,126}[%]$)",
              "errorText": "$blobOut_path_errorText"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "Storage",
          "required": true,
          "label": "[variables('storageConnStringLabel')]",
          "help": "[variables('appSettingsHelp')]",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "blob",
      "displayName": "$blobIn_displayName",
      "direction": "in",
      "enabledInTryMode": true,
      "documentation": "#### Settings for a storage blob input binding\r\n\r\n- `name` : The variable name used in function code for the blob . \r\n- `path` : A path that specifies the container to read the blob from and optionally a blob name pattern.\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the binding will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *blob*.\r\n- `direction` : Set to *in*\r\n\r\n#### Blob input and output supported types\r\n\r\nThe `blob` binding can serialize or deserialize the following types in JavaScript or C# functions:\r\n\r\n* Object\r\n* String\r\n\r\nIn C# functions, you can also bind to the following types:\r\n\r\n* `TextReader`\r\n* `Stream`\r\n* `ICloudBlob`\r\n* `CloudBlockBlob` \r\n* `CloudPageBlob` \r\n\r\n#### Blob output C# code example\r\n\r\nThis C# code example copies a blob whose name is received in a queue message.\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, string myInputBlob, out string myOutputBlob, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    myOutputBlob = myInputBlob;\r\n}\r\n```\r\n\r\n#### Blob output JavaScript example\r\n\r\n```JavaScript\r\n// this assumes that your blob input is your only input\r\nmodule.exports = function(context, trigger, inputBlob) {\r\n    context.log(inputBlob);\r\n    //it's also available on context.bindings\r\n    context.log(context.bindings.inputBlob); // will log the same thing as above\r\n    context.done();\r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputBlob",
          "required": true,
          "label": "$blobIn_name_label",
          "help": "$blobIn_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "incontainer/{name}",
          "required": true,
          "label": "$blobIn_path_label",
          "help": "$blobIn_path_help",
          "validators": [
            {
              "expression": "((^[a-z0-9](?:[a-z0-9]|(?:\\-(?!\\-))){1,61}[a-z0-9])|(^[{][a-zA-Z0-9]{1,126}[}])|(^[%][a-zA-Z0-9]{1,126}[%]))[\\/](\\S){0,1023}[^\\/]$|(^[{][a-zA-Z0-9]{1,126}[}]$)|(^[%][a-zA-Z0-9]{1,126}[%]$)",
              "errorText": "$blobIn_patherrorText"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "Storage",
          "required": true,
          "label": "[variables('storageConnStringLabel')]",
          "help": "[variables('appSettingsHelp')]",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "blobTrigger",
      "displayName": "$blobTrigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": true,
      "documentation": "#### Settings for storage blob trigger\r\n\r\n- `name` : The variable name used in function code for the blob. \r\n- `path` : A path that specifies the container to monitor, and optionally a blob name pattern.\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the trigger will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *blobTrigger*.\r\n- `direction` : Must be set to *in*.\r\n\r\n#### Blob trigger name patterns\r\n\r\nYou can specify a blob name pattern in the `path` property. For example:\r\n\r\n```json\r\n\"path\": \"input/original-{name}\",\r\n```\r\n\r\nThis path would find a blob named *original-Blob1.txt* in the *input* container, and the value of the `name` variable in function code would be `Blob1`.\r\n\r\nAnother example:\r\n\r\n```json\r\n\"path\": \"input/{blobname}.{blobextension}\",\r\n```\r\n\r\nThis path would also find a blob named *original-Blob1.txt*, and the value of the `blobname` and `blobextension` variables in function code would be *original-Blob1* and *txt*.\r\n\r\nYou can restrict the types of blobs that trigger the function by specifying a pattern with a fixed value for the file extension. If you set the `path` to  *samples/{name}.png*, only *.png* blobs in the *samples* container will trigger the function.\r\n\r\nIf you need to specify a name pattern for blob names that have curly braces in the name, double the curly braces. For example, if you want to find blobs in the *images* container that have names like this:\r\n\r\n\t\t{20140101}-soundfile.mp3\r\n\r\nuse this for the `path` property:\r\n\r\n\t\timages/{{20140101}}-{name}\r\n\r\nIn the example, the `name` variable value would be *soundfile.mp3*. \r\n\r\n#### Blob trigger supported types\r\n\r\nThe blob can be deserialized to any of the following types in JavaScript or C# functions:\r\n\r\n* Object (from JSON)\r\n* String\r\n\r\nIn C# functions you can also bind to any of the following types:\r\n\r\n* `TextReader`\r\n* `Stream`\r\n* `ICloudBlob`\r\n* `CloudBlockBlob`\r\n* `CloudPageBlob`\r\n* `CloudBlobContainer`\r\n* `CloudBlobDirectory`\r\n* `IEnumerable<CloudBlockBlob>`\r\n* `IEnumerable<CloudPageBlob>`\r\n* Other types deserialized by [ICloudBlobStreamBinder](https://azure.microsoft.com/en-us/documentation/articles/websites-dotnet-webjobs-sdk-storage-blobs-how-to/)\r\n\r\n#### Blob trigger C# code example\r\n\r\n```csharp\r\npublic static void Run(string myBlob, TraceWriter log)\r\n{\r\n    log.Info($\"C# Blob trigger function processed: {myBlob}\");\r\n}\r\n```\r\n\r\n#### Blob trigger JavaScript example\r\n\r\n```JavaScript\r\nmodule.exports = function(context, myBlob) {\r\n    context.log(myBlob);\r\n    context.done();\r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "myBlob",
          "required": true,
          "label": "$blobTrigger_name_label",
          "help": "$blobTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "mycontainer",
          "required": true,
          "label": "$blobTrigger_path_label",
          "help": "$blobTrigger_path_help",
          "validators": [
            {
              "expression": "(((^[a-z0-9](?:[a-z0-9]|(?:\\-(?!\\-))){1,61}[a-z0-9])|(^[{][a-zA-Z0-9]{1,126}[}])|(^[%][a-zA-Z0-9]{1,126}[%]))[\\/](\\S){0,1023}[^\\/]$)|(((^[a-z0-9](?:[a-z0-9]|(?:\\-(?!\\-))){1,61}[a-z0-9]$)|(^[{][a-zA-Z0-9]{1,126}[}]$)|(^[%][a-zA-Z0-9]{1,126}[%]$)))",
              "errorText": "$blobTrigger_path_errorText"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "Storage",
          "required": true,
          "label": "[variables('storageConnStringLabel')]",
          "help": "[variables('appSettingsHelp')]",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "apiHubFile",
      "displayName": "$apiHubFileIn_displayName",
      "direction": "in",
      "enabledInTryMode": false,
      "documentation": "This feature is in preview! [Read the docs here](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-external-file)\r\n\r\nIf you have suggestions to improve this preview [please submit a github issue](https://github.com/Azure/azure-webjobs-sdk-script/issues)\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputFile",
          "required": true,
          "label": "$apiHubFileIn_name_label",
          "help": "$apiHubFileIn_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "path/{file}",
          "required": true,
          "label": "$apiHubFileIn_path_label",
          "help": "$apiHubFileIn_path_help",
          "validators": []
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "ApiHub",
          "required": true,
          "label": "$apiHubFileIn_connection_label",
          "help": "$apiHubFileIn_connection_help",
          "metadata": {
            "capability": "blob"
          }
        }
      ]
    },
    {
      "type": "apiHubFile",
      "displayName": "$apiHubFileIn_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "This feature is in preview! [Read the docs here](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-external-file)\r\n\r\nIf you have suggestions to improve this preview [please submit a github issue](https://github.com/Azure/azure-webjobs-sdk-script/issues)",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputFile",
          "required": true,
          "label": "$apiHubFileIn_name_label",
          "help": "$apiHubFileIn_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "path/{file}",
          "required": true,
          "label": "$apiHubFileIn_path_label",
          "help": "$apiHubFileIn_path_help",
          "validators": []
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "ApiHub",
          "required": true,
          "label": "$apiHubFileIn_connection_label",
          "help": "$apiHubFileIn_connection_help",
          "metadata": {
            "capability": "blob"
          }
        }
      ]
    },
    {
      "type": "apiHubFileTrigger",
      "displayName": "$apiHubFileTrigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": false,
      "documentation": "This feature is experimental. Docs will be coming soon!",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputFile",
          "required": true,
          "label": "$apiHubFileTrigger_name_label",
          "help": "$apiHubFileTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "path",
          "value": "string",
          "defaultValue": "path/{file}",
          "required": true,
          "label": "$apiHubFileTrigger_path_label",
          "help": "$apiHubFileTrigger_path_help",
          "validators": []
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "ApiHub",
          "required": true,
          "label": "$apiHubFileTrigger_connection_label",
          "help": "$apiHubFileTrigger_connection_help",
          "metadata": {
            "capability": "blob",
            "excluded": [
              "googledrive",
              "azureblob",
              "azurefile",
              "filesystem"
            ]
          }
        }
      ]
    },
    {
      "type": "apiHubTable",
      "displayName": "$apiHubTableIn_displayName",
      "direction": "in",
      "enabledInTryMode": false,
      "documentation": "This feature is in preview! [Read the docs here](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-external-table)\r\n\r\nIf you have suggestions to improve this preview [please submit a github issue](https://github.com/Azure/azure-webjobs-sdk-script/issues)",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputTable",
          "required": true,
          "label": "[variables('paramNameLabel')]",
          "help": "[variables('paramNameInputHelp')]",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "dataSetName",
          "value": "string",
          "defaultValue": "default",
          "required": false,
          "label": "[variables('apiHubTableDataSetLabel')]",
          "help": "[variables('apiHubTableDataSetHelp')]",
          "validators": []
        },
        {
          "name": "tableName",
          "value": "string",
          "defaultValue": null,
          "required": false,
          "label": "[variables('apiHubTableNameLabel')]",
          "help": "[variables('apiHubTableHelp')]",
          "validators": []
        },
        {
          "name": "entityId",
          "value": "string",
          "defaultValue": null,
          "required": false,
          "label": "[variables('apiHubTableEntityLabel')]",
          "help": "[variables('apiHubTableEntityHelp')]",
          "validators": []
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "ApiHub",
          "required": true,
          "label": "[variables('apiHubTableConnectionLabel')]",
          "help": "[variables('apiHubTableConnectionHelp')]",
          "metadata": {
            "capability": "tabular"
          }
        }
      ]
    },
    {
      "type": "apiHubTable",
      "displayName": "$apiHubTableOut_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "This feature is in preview! [Read the docs here](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-external-table)\r\n\r\nIf you have suggestions to improve this preview [please submit a github issue](https://github.com/Azure/azure-webjobs-sdk-script/issues)",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputTable",
          "required": true,
          "label": "[variables('paramNameLabel')]",
          "help": "[variables('paramNameOutputHelp')]",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "dataSetName",
          "value": "string",
          "defaultValue": "default",
          "required": false,
          "label": "[variables('apiHubTableDataSetLabel')]",
          "help": "[variables('apiHubTableDataSetHelp')]",
          "validators": []
        },
        {
          "name": "tableName",
          "value": "string",
          "defaultValue": null,
          "required": false,
          "label": "[variables('apiHubTableNameLabel')]",
          "help": "[variables('apiHubTableHelp')]",
          "validators": []
        },
        {
          "name": "entityId",
          "value": "string",
          "defaultValue": null,
          "required": false,
          "label": "[variables('apiHubTableEntityLabel')]",
          "help": "[variables('apiHubTableEntityHelp')]",
          "validators": []
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "ApiHub",
          "required": true,
          "label": "[variables('apiHubTableConnectionLabel')]",
          "help": "[variables('apiHubTableConnectionHelp')]",
          "metadata": {
            "capability": "tabular"
          }
        }
      ]
    },
    {
      "type": "httpTrigger",
      "displayName": "$httpTrigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": true,
      "documentation": "## Settings for HTTP and webhook bindings\r\n\r\nThe settings provide properties that pertain to both the request and response.\r\n\r\nProperties for the HTTP request:\r\n\r\n- `name` : Variable name used in function code for the request object (or the request body in the case of JavaScript functions).\r\n- `type` : Must be set to *httpTrigger*.\r\n- `direction` : Must be set to *in*. \r\n- `webHookType` : For WebHook triggers, valid values are *github*, *slack*, and *genericJson*. \r\n- `authLevel` : Doesn't apply to WebHook triggers. Set to \"function\" to require the API key, \"anonymous\" to drop the API key requirement, or \"admin\" to require the master API key.\r\n\r\nProperties for the HTTP response:\r\n\r\n- `name` : Variable name used in function code for the response object.\r\n- `type` : Must be set to *http*.\r\n- `direction` : Must be set to *out*. \r\n\r\n## WebHook triggers\r\n\r\nA WebHook trigger is an HTTP trigger that has the following features designed for WebHooks:\r\n\r\n* For specific WebHook providers (currently GitHub and Slack are supported), the Functions runtime validates the provider's signature.\r\n* For JavaScript functions, the Functions runtime provides the request body instead of the request object. There is no special handling for C# functions, because you control what is provided by specifying the parameter type. If you specify `HttpRequestMessage` you get the request object. If you specify a POCO type, the Functions runtime tries to parse a JSON object in the body of the request to populate the object properties.\r\n* To trigger a WebHook function the HTTP request must include an API key. For non-WebHook HTTP triggers,  this requirement is optional.\r\n\r\nFor information about how to set up a GitHub WebHook, see [GitHub Developer - Creating WebHooks](http://go.microsoft.com/fwlink/?LinkID=761099&clcid=0x409).\r\n\r\n## URL to trigger the function\r\n\r\nTo trigger a function, you send an HTTP request to a URL that is a combination of the function app URL and the function name:\r\n\r\n```\r\n https://{function app name}.azurewebsites.net/api/{function name} \r\n```\r\n\r\n## API keys\r\n\r\nBy default, an API key must be included with an HTTP request to trigger an HTTP or WebHook function. The key can be included in a query string variable named `code`, or it can be included in an `x-functions-key` HTTP header. For non-WebHook functions, you can indicate that an API key is not required by setting the `authLevel` property to \"anonymous\" in the *function.json* file.\r\n\r\nYou can find API key values in the *D:\\home\\data\\Functions\\secrets* folder in the file system of the function app.  The master key and function key are set in the *host.json* file, as shown in this example. \r\n\r\n```json\r\n{\r\n  \"masterKey\": \"K6P2VxK6P2VxK6P2VxmuefWzd4ljqeOOZWpgDdHW269P2hb7OSJbDg==\",\r\n  \"functionKey\": \"OBmXvc2K6P2VxK6P2VxK6P2VxVvCdB89gChyHbzwTS/YYGWWndAbmA==\"\r\n}\r\n```\r\n\r\nThe function key from *host.json* can be used to trigger any function but won't trigger a disabled function. The master key can be used to trigger any function and will trigger a function even if it's disabled. You can configure a function to require the master key by setting the `authLevel` property to \"admin\". \r\n\r\nIf the *secrets* folder contains a JSON file with the same name as a function, the `key` property in that file can also be used to trigger the function, and this key will only work with the function it refers to. For example, the API key for a function named `HttpTrigger` is specified in *HttpTrigger.json* in the *secrets* folder. Here is an example:\r\n\r\n```json\r\n{\r\n  \"key\":\"0t04nmo37hmoir2rwk16skyb9xsug32pdo75oce9r4kg9zfrn93wn4cx0sxo4af0kdcz69a4i\"\r\n}\r\n```\r\n\r\n## Example C# code for an HTTP trigger function \r\n\r\n```csharp\r\nusing System.Net;\r\nusing System.Threading.Tasks;\r\n\r\npublic static async Task<HttpResponseMessage> Run(HttpRequestMessage req, TraceWriter log)\r\n{\r\n    log.Info(\"C# HTTP trigger function processed a request.\");\r\n\r\n    // parse query parameter\r\n    string name = req.GetQueryNameValuePairs()\r\n        .FirstOrDefault(q => string.Compare(q.Key, \"name\", true) == 0)\r\n        .Value;\r\n\r\n    // Get request body\r\n    dynamic data = await req.Content.ReadAsAsync<object>();\r\n\r\n    // Set name to query string or body data\r\n    name = name ?? data?.name;\r\n\r\n    return name == null\r\n        ? req.CreateResponse(HttpStatusCode.BadRequest, \"Please pass a name on the query string or in the request body\")\r\n        : req.CreateResponse(HttpStatusCode.OK, \"Hello \" + name);\r\n}\r\n```\r\n\r\n## Example JavaScript code for an HTTP trigger function \r\n\r\nWe support an [express-like api](https://expressjs.com/en/4x/api.html#res) for JavaScript http triggers.\r\nSee supported methods for [context.req](https://github.com/Azure/azure-functions-host/blob/v1.x/src/WebJobs.Script/azurefunctions/http/request.js) and [context.res](https://github.com/Azure/azure-functions-host/blob/v1.x/src/WebJobs.Script/azurefunctions/http/response.js).\r\n\r\n```javascript\r\nmodule.exports = function(context, req) {\r\n    context.log('JavaScript HTTP trigger function processed a request.');\r\n\r\n    if (req.query.name || (req.body && req.body.name)) {\r\n        // using the express api style\r\n        context.res\r\n            // set statusCode to 200\r\n            .status(200)\r\n            // set a header on the response\r\n            .set(\"QuerySet\", req.query.name != undefined)\r\n            // send will automatically call context.done\r\n            .send(\"Hello \" + (req.query.name || req.body.name));\r\n    } else {\r\n        // alternate style\r\n        context.res = {\r\n            status: 400,\r\n            body: \"Please pass a name on the query string or in the request body\"\r\n        };\r\n        context.done();\r\n    }\r\n};\r\n```\r\n\r\n## Example C# code for a GitHub WebHook function \r\n\r\n```csharp\r\n#r \"Newtonsoft.Json\"\r\n\r\nusing System;\r\nusing System.Net;\r\nusing System.Threading.Tasks;\r\nusing Newtonsoft.Json;\r\n\r\npublic static async Task<object> Run(HttpRequestMessage req, TraceWriter log)\r\n{\r\n    string jsonContent = await req.Content.ReadAsStringAsync();\r\n    dynamic data = JsonConvert.DeserializeObject(jsonContent);\r\n\r\n    log.Info($\"WebHook was triggered! Comment: {data.comment.body}\");\r\n\r\n    return req.CreateResponse(HttpStatusCode.OK, new {\r\n        body = $\"New GitHub comment: {data.comment.body}\"\r\n    });\r\n}\r\n```\r\n\r\n## Example JavaScript code for a GitHub WebHook function \r\n\r\n```javascript\r\nmodule.exports = function (context, data) {\r\n    context.log('GitHub WebHook triggered!', data.comment.body);\r\n    context.res.send('New GitHub comment: ' + data.comment.body);\r\n};\r\n```\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "req",
          "required": true,
          "label": "$httpTrigger_name_label",
          "help": "$httpTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "route",
          "value": "string",
          "required": false,
          "label": "$httpTrigger_route_label",
          "help": "$httpTrigger_route_help",
          "validators": []
        },
        {
          "name": "webHookType",
          "value": "enum",
          "enum": [
            {
              "value": "github",
              "display": "GitHub"
            },
            {
              "value": "genericJson",
              "display": "Generic JSON"
            },
            {
              "value": "slack",
              "display": "Slack"
            }
          ],
          "label": "$httpTrigger_webHookType_label",
          "help": "$httpTrigger_webHookType_help"
        },
        {
          "name": "authLevel",
          "value": "enum",
          "enum": [
            {
              "value": "function",
              "display": "Function"
            },
            {
              "value": "anonymous",
              "display": "Anonymous"
            },
            {
              "value": "admin",
              "display": "Admin"
            }
          ],
          "label": "$httpTrigger_authLevel_label",
          "help": "$httpTrigger_authLevel_help"
        },
        {
          "name": "methods",
          "value": "checkBoxList",
          "defaultValue": [
            "get",
            "post",
            "delete",
            "head",
            "patch",
            "put",
            "options",
            "trace"
          ],
          "enum": [
            {
              "value": "get",
              "display": "GET"
            },
            {
              "value": "post",
              "display": "POST"
            },
            {
              "value": "delete",
              "display": "DELETE"
            },
            {
              "value": "head",
              "display": "HEAD"
            },
            {
              "value": "patch",
              "display": "PATCH"
            },
            {
              "value": "put",
              "display": "PUT"
            },
            {
              "value": "options",
              "display": "OPTIONS"
            },
            {
              "value": "trace",
              "display": "TRACE"
            }
          ],
          "label": "$httpTrigger_methods_label",
          "help": "$httpTrigger_methods_help"
        }
      ],
      "rules": [
        {
          "name": "mode",
          "type": "exclusivity",
          "values": [
            {
              "value": "authLevel",
              "display": "Standard",
              "hiddenSettings": [
                "webHookType"
              ],
              "shownSettings": [
                "authLevel"
              ]
            },
            {
              "value": "webHookType",
              "display": "Webhook",
              "hiddenSettings": [
                "authLevel"
              ],
              "shownSettings": [
                "webHookType"
              ]
            }
          ],
          "label": "$httpTrigger_mode_label",
          "help": "$httpTrigger_mode_help"
        },
        {
          "name": "methodRule",
          "type": "exclusivity",
          "values": [
            {
              "value": "allMethods",
              "display": "All methods",
              "hiddenSettings": [
                "methods"
              ],
              "shownSettings": []
            },
            {
              "value": "methods",
              "display": "Selected methods",
              "hiddenSettings": [],
              "shownSettings": [
                "methods"
              ]
            }
          ],
          "label": "$httpTrigger_methodRule_label",
          "help": "$httpTrigger_methodRule_help"
        }
      ]
    },
    {
      "type": "http",
      "displayName": "$httpOut_displayName",
      "direction": "out",
      "enabledInTryMode": true,
      "documentation": "You need this binding for http responses. Always use this with the HTTP Trigger.\r\n\r\n## Settings for HTTP and webhook bindings\r\n\r\nProperties for the HTTP response:\r\n\r\n- `name` : Variable name used in function code for the response object.\r\n- `type` : Must be set to *http*.\r\n- `direction` : Must be set to *out*. \r\n\r\n\r\nSee HTTP trigger for more samples",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "res",
          "required": true,
          "label": "$httpOut_name_label",
          "help": "$httpOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        }
      ]
    },
    {
      "type": "serviceBusTrigger",
      "displayName": "$serviceBusTrigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": false,
      "documentation": "#### Settings for Service Bus queue or topic trigger\r\n\r\nThe settings specify the following properties.\r\n\r\n- `name` : The variable name used in function code for the queue or topic, or the queue or topic message. \r\n- `queueName` : For queue trigger only, the name of the queue to poll.\r\n- `topicName` : For topic trigger only, the name of the topic to poll.\r\n- `subscriptionName` : For topic trigger only, the subscription name.\r\n- `connection` : The name of an app setting that contains a Service Bus connection string. The connection string must be for a Service Bus namespace, not limited to a specific queue or topic. If the connection string doesn't have manage rights, set the `accessRights` property. If you leave `connection` empty, the trigger or binding will work with the default Service Bus connection string for the function app, which is specified by the AzureWebJobsServiceBus app setting.\r\n- `accessRights` : Specifies the access rights available for the connection string. Default value is `manage`. Set to `listen` if you're using a connection string that doesn't provide manage permissions. Otherwise the Functions runtime might try and fail to do operations that require manage rights.\r\n- `type` : Must be set to *serviceBusTrigger*.\r\n- `direction` : Must be set to *in*. \r\n\r\n#### C# code example that processes a Service Bus queue message\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, TraceWriter log)\r\n{\r\n    log.Info($\"C# ServiceBus queue trigger function processed message: {myQueueItem}\");\r\n}\r\n```\r\n\r\n#### JavaScript code example that processes a Service Bus queue message\r\n\r\n```javascript\r\nmodule.exports = function(context, myQueueItem) {\r\n    context.log('JavaScript ServiceBus queue trigger function processed message', myQueueItem);\r\n    context.done();\r\n};\r\n```\r\n\r\n#### Supported types\r\n\r\nThe Service Bus queue message can be deserialized to any of the following types:\r\n\r\n* Object (from JSON)\r\n* string\r\n* byte array \r\n* `BrokeredMessage` (C#) \r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "mySbMsg",
          "required": true,
          "label": "$serviceBusTrigger_name_label",
          "help": "$serviceBusTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "ServiceBus",
          "required": true,
          "label": "$serviceBusTrigger_connection_label",
          "help": "$serviceBusTrigger_connection_help",
          "placeholder": "[variables('selectConnection')]"
        },
        {
          "name": "queueName",
          "value": "string",
          "defaultValue": "mysbqueue",
          "required": true,
          "label": "$serviceBusTrigger_queueName_label",
          "help": "$serviceBusTrigger_queueName_help",
          "validators": [
            {
              "expression": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}([a-zA-Z0-9]$|[a-zA-Z0-9][\\/]\\$DeadLetterQueue$)|^[{][a-zA-Z0-9]{1,126}([}]$|[}][\\/]\\$DeadLetterQueue$)|^[%][a-zA-Z0-9]{1,126}([%]$|[%][\\/]\\$DeadLetterQueue$)",
              "errorText": "$serviceBusTrigger_queueName_errorText"
            }
          ]
        },
        {
          "name": "topicName",
          "value": "string",
          "defaultValue": "mysbtopic",
          "required": true,
          "label": "$serviceBusTrigger_topicName_label",
          "help": "$serviceBusTrigger_topicName_help",
          "validators": [
            {
              "expression": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}[a-zA-Z0-9]$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$serviceBusTrigger_topicName_errorText"
            }
          ]
        },
        {
          "name": "subscriptionName",
          "value": "string",
          "defaultValue": "mysubscription",
          "required": true,
          "label": "$serviceBusTrigger_subscriptionName_label",
          "help": "$serviceBusTrigger_subscriptionName_help",
          "validators": [
            {
              "expression": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}([a-zA-Z0-9]$|[a-zA-Z0-9][\\/]\\$DeadLetterQueue$)|^[{][a-zA-Z0-9]{1,126}([}]$|[}][\\/]\\$DeadLetterQueue$)|^[%][a-zA-Z0-9]{1,126}([%]$|[%][\\/]\\$DeadLetterQueue$)",
              "errorText": "$serviceBusTrigger_subscriptionName_errorText"
            }
          ]
        },
        {
          "name": "accessRights",
          "value": "enum",
          "enum": [
            {
              "value": "Manage",
              "display": "Manage"
            },
            {
              "value": "Listen",
              "display": "Listen"
            }
          ],
          "label": "$serviceBusTrigger_accessRights_label",
          "help": "$serviceBusTrigger_accessRights_help"
        }
      ],
      "rules": [
        {
          "name": "messageType",
          "type": "exclusivity",
          "values": [
            {
              "value": "queueName",
              "display": "$serviceBusTrigger_messageType_queueName",
              "hiddenSettings": [
                "topicName",
                "subscriptionName"
              ],
              "shownSettings": [
                "queueName"
              ]
            },
            {
              "value": "topicName",
              "display": "$serviceBusTrigger_messageType_topicName",
              "hiddenSettings": [
                "queueName"
              ],
              "shownSettings": [
                "topicName",
                "subscriptionName"
              ]
            }
          ],
          "label": "$serviceBusTrigger_messageType_label",
          "help": "$serviceBusTrigger_messageType_help"
        }
      ]
    },
    {
      "type": "serviceBus",
      "displayName": "$serviceBusOut_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "#### Settings for Service Bus queue or topic output binding\r\n\r\nThe settings specify the following properties.\r\n\r\n- `name` : The variable name used in function code for the queue or queue message. \r\n- `queueName` : For queue trigger only, the name of the queue to poll.\r\n- `topicName` : For topic trigger only, the name of the topic to poll.\r\n- `subscriptionName` : For topic trigger only, the subscription name.\r\n- `connection` : Same as for Service Bus trigger.\r\n- `accessRights` : Specifies the access rights available for the connection string. Default value is `manage`. Set to `send` if you're using a connection string that doesn't provide manage permissions. Otherwise the Functions runtime might try and fail to do operations that require manage rights, such as creating queues.\r\n- `type` : Must be set to *serviceBus*.\r\n- `direction` : Must be set to *out*. \r\n\r\n#### Supported types\r\n\r\nAzure Functions can create a Service Bus queue message from any of the following types.\r\n\r\n* Object (always creates a JSON message, creates the message with a null object if the value is null when the function ends)\r\n* string (creates a message if the value is non-null when the function ends)\r\n* byte array (works like string) \r\n* `BrokeredMessage` (C#, works like string)\r\n\r\nFor creating multiple messages in a C# function, you can use `ICollector<T>` or `IAsyncCollector<T>`. A message is created when you call the `Add` method. For JavaScript, you can return an array.\r\n\r\n#### C# code examples that create Service Bus queue messages\r\n\r\n```csharp\r\npublic static void Run(TimerInfo myTimer, TraceWriter log, out string outputSbQueue)\r\n{\r\n\tstring message = $\"Service Bus queue message created at: {DateTime.Now}\";\r\n    log.Info(message); \r\n    outputSbQueue = message;\r\n}\r\n```\r\n\r\n```csharp\r\npublic static void Run(TimerInfo myTimer, TraceWriter log, ICollector<string> outputSbQueue)\r\n{\r\n\tstring message = $\"Service Bus queue message created at: {DateTime.Now}\";\r\n    log.Info(message); \r\n    outputSbQueue.Add(\"1 \" + message);\r\n    outputSbQueue.Add(\"2 \" + message);\r\n}\r\n```\r\n\r\n#### JavaScript code example that creates Service Bus queue messages\r\n\r\n```javascript\r\nmodule.exports = function (context, myTimer) {\r\n    var message = 'Service Bus queue message created at ' + timeStamp;\r\n    context.log(message);   \r\n    context.bindings.outputSbQueueMsg = message;\r\n    context.done();\r\n};\r\n```\r\n\r\n```javascript\r\nmodule.exports = function (context, myTimer) {\r\n    var message = 'Service Bus queue message created at ' + timeStamp;\r\n    context.log(message);   \r\n    context.bindings.outputSbQueueMsg = [\r\n        message,\r\n        {\r\n            \"hello\":\"world\"\r\n        }\r\n    ];\r\n    context.done();\r\n};\r\n```",
      "settings": [
        {
          "name": "connection",
          "value": "string",
          "resource": "ServiceBus",
          "required": true,
          "label": "$serviceBusOut_connection_label",
          "help": "$serviceBusOut_connection_help",
          "placeholder": "[variables('selectConnection')]"
        },
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputSbMsg",
          "required": true,
          "label": "$serviceBusOut_name_label",
          "help": "$serviceBusOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "queueName",
          "value": "string",
          "defaultValue": "outqueue",
          "required": true,
          "label": "$serviceBusOut_queueName_label",
          "help": "$serviceBusOut_queueName_help",
          "validators": [
            {
              "expression": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}([a-zA-Z0-9]$|[a-zA-Z0-9][\\/]\\$DeadLetterQueue$)|^[{][a-zA-Z0-9]{1,126}([}]$|[}][\\/]\\$DeadLetterQueue$)|^[%][a-zA-Z0-9]{1,126}([%]$|[%][\\/]\\$DeadLetterQueue$)",
              "errorText": "$serviceBusOut_queueName_errorText"
            }
          ]
        },
        {
          "name": "topicName",
          "value": "string",
          "defaultValue": "outtopic",
          "required": true,
          "label": "$serviceBusOut_topicName_label",
          "help": "$serviceBusOut_topicName_help",
          "validators": [
            {
              "expression": "^[a-zA-Z0-9]$|^[a-zA-Z0-9][a-zA-Z0-9-_.]{0,48}[a-zA-Z0-9]$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$serviceBusOut_topicName_errorText"
            }
          ]
        },
        {
          "name": "accessRights",
          "value": "enum",
          "enum": [
            {
              "value": "Manage",
              "display": "Manage"
            },
            {
              "value": "Send",
              "display": "Send"
            }
          ],
          "label": "$serviceBusOut_accessRights_label",
          "help": "$serviceBusOut_accessRights_help"
        }
      ],
      "rules": [
        {
          "name": "messageType",
          "type": "exclusivity",
          "values": [
            {
              "value": "queueName",
              "display": "$serviceBusOut_messageType_queueName",
              "hiddenSettings": [
                "topicName"
              ],
              "shownSettings": [
                "queueName"
              ]
            },
            {
              "value": "topicName",
              "display": "$serviceBusOut_messageType_topicName",
              "hiddenSettings": [
                "queueName"
              ],
              "shownSettings": [
                "topicName"
              ]
            }
          ],
          "label": "$serviceBusOut_messageType_label",
          "help": "$serviceBusOut_messageType_help"
        }
      ]
    },
    {
      "type": "manualTrigger",
      "displayName": "Manual",
      "direction": "trigger",
      "enabledInTryMode": true,
      "documentation": "#### Settings for manual trigger\r\n\r\n- `type` : Must be set to *manualTrigger*.\r\n- `name` : The variable name used in function code for the event hub message. \r\n\r\n#### Data types\r\n\r\nManual trigger supports\r\n - Object (JSON) (C# supports `T`)\r\n - String\r\n\r\n#### Manual trigger C# example\r\n \r\n ```csharp\r\nusing System;\r\n\r\npublic static void Run(string trigger, TraceWriter log)\r\n{\r\n    log.Info(trigger);\r\n}\r\n```\r\n\r\n#### Manual trigger JavaScript example\r\n \r\n ```javascript\r\nmodule.exports = function (context, trigger) {\r\n    context.log(trigger);\t\r\n    context.done();\r\n};\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "input",
          "required": true,
          "label": "$manualTrigger_name_label",
          "help": "$manualTrigger_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        }
      ]
    },
    {
      "type": "table",
      "displayName": "$tableout_displayName",
      "direction": "out",
      "enabledInTryMode": true,
      "documentation": "#### function.json for storage tables\r\n\r\nThe *function.json* specifies the following properties.\r\n\r\n- `name` : The variable name used in function code for the table binding. \r\n- `tableName` : The name of the table.\r\n- `partitionKey` and `rowKey` : Used together to read to write a single entity in a JavaScript function.\r\n- `connection` : The name of an app setting that contains a storage connection string. If you leave `connection` empty, the binding will work with the default storage connection string for the function app, which is specified by the AzureWebJobsStorage app setting.\r\n- `type` : Must be set to *table*.\r\n- `direction` : Set to *out*. \r\n\r\n#### Storage tables input and output supported types\r\n\r\nThe `table` binding can serialize or deserialize objects in JavaScript or C# functions. The objects will have RowKey and PartitionKey properties. \r\n\r\nIn C# functions, you can also bind to the following types:\r\n\r\n* `T` where `T` implements `ITableEntity`\r\n* `ICollector<T>` \r\n* `IAsyncCollector<T>`\r\n\r\n#### Storage tables binding scenarios\r\n\r\nThe table binding supports the following scenarios:\r\n\r\n* Write one or more rows in a C# function.\r\n\r\n\tThe Functions runtime provides an `ICollector<T>` or `IAsyncCollector<T>` bound to the table, where `T` specifies the schema of the entities you want to add. Typically, type `T` derives from `TableEntity` or implements `ITableEntity`, but it doesn't have to. The `partitionKey`, `rowKey`, `filter`, and `take` properties are not used in this scenario.\r\n\r\n\r\n#### Storage tables example: C# code that creates table entities\r\n\r\n```csharp\r\npublic static void Run(string input, ICollector<Person> tableBinding, TraceWriter log)\r\n{\r\n    for (int i = 1; i < 10; i++)\r\n        {\r\n            log.Info($\"Adding Person entity {i}\");\r\n            tableBinding.Add(\r\n                new Person() { \r\n                    PartitionKey = \"Test\", \r\n                    RowKey = i.ToString(), \r\n                    Name = \"Name\" + i.ToString() }\r\n                );\r\n        }\r\n\r\n}\r\n\r\npublic class Person\r\n{\r\n    public string PartitionKey { get; set; }\r\n    public string RowKey { get; set; }\r\n    public string Name { get; set; }\r\n}\r\n\r\n```\r\n\r\n#### Storage tables example: JavaScript example that creates a table entity\r\n\r\n```javascript\r\nmodule.exports = function (context, myQueueItem) {\r\n    context.log('JavaScript queue trigger function processed work item', myQueueItem);\r\n    context.bindings.tableOut = {\r\n        \"partitionKey\": \"123Contoso\",\r\n        \"rowKey\":\"Fabrikam43234\",\r\n        \"Name\": \"Name\" + myQueueItem \r\n    }\r\n    context.done();\r\n};\r\n```\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputTable",
          "required": true,
          "label": "$tableout_name_label",
          "help": "$tableout_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "tableName",
          "value": "string",
          "defaultValue": "outTable",
          "required": true,
          "label": "$table_tableName_label",
          "help": "$table_tableName_help",
          "validators": [
            {
              "expression": "^[A-Za-z][A-Za-z0-9]{2,62}$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$table_tableName_errorText"
            }
          ]
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "Storage",
          "required": true,
          "label": "[variables('storageConnStringLabel')]",
          "help": "[variables('appSettingsHelp')]",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "table",
      "displayName": "$tableIn_displayName",
      "direction": "in",
      "enabledInTryMode": true,
      "documentation": "#### Settings for storage tables\r\n\r\n- `name` : The variable name used in function code for the table binding. \r\n- `tableName` : The name of the table.\r\n- `partitionKey` and `rowKey` : Used together to read a single entity in a C# or JavaScript function\r\n- `take` : The maximum number of rows to read for table input in a JavaScript function.\r\n- `filter` : OData filter expression for table input in a JavaScript function.\r\n- `connection` : The name of an app setting that contains a storage connection string. \r\n- `type` : Must be set to *table*.\r\n- `direction` : Set to *in*\r\n\r\n#### Storage tables input supported types\r\n\r\nThe `table` binding can serialize or deserialize objects in JavaScript or C# functions. The objects will have RowKey and PartitionKey properties. \r\n\r\nIn C# functions, you can also bind to the following types:\r\n\r\n* `T` where `T` implements `ITableEntity`\r\n* `IQueryable<T>` \r\n\r\n#### Storage tables binding scenarios\r\n\r\nThe table binding supports the following scenarios:\r\n\r\n* Read a single row in a C# or JavaScript function.\r\n\r\n\tSet `partitionKey` and `rowKey`. The `filter` and `take` properties are not used in this scenario.\r\n\r\n* Read multiple rows in a C# function.\r\n\r\n\tThe Functions runtime provides an `IQueryable<T>` object bound to the table. Type `T` must derive from `TableEntity` or implement `ITableEntity`. The `partitionKey`, `rowKey`, `filter`, and `take` properties are not used in this scenario; you can use the `IQueryable` object to do any filtering required. \r\n\r\n* Read multiple rows in a JavaScript function.\r\n\r\n\tSet the `filter` and `take` properties. Don't set `partitionKey` or `rowKey`.\r\n\r\n\r\n#### Storage tables example: Read a single table entity in C# or JavaScript\r\n\r\nThe queue message has the row key value and the table entity is read into a type that is user defined. The type includes `PartitionKey` and `RowKey` properties and does not derive from `TableEntity`. \r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, Person personEntity, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    log.Info($\"Name in Person entity: {personEntity.Name}\");\r\n}\r\n\r\npublic class Person\r\n{\r\n    public string PartitionKey { get; set; }\r\n    public string RowKey { get; set; }\r\n    public string Name { get; set; }\r\n}\r\n```\r\n\r\nThe following JavaScript code example also works to read a single table entity.\r\n\r\n```javascript\r\nmodule.exports = function (context, myQueueItem) {\r\n    context.log('JavaScript queue trigger function processed work item', myQueueItem);\r\n    context.log('Person entity name: ' + context.bindings.personEntity.Name);\r\n    context.done();\r\n};\r\n```\r\n\r\n#### Storage tables example: C# example that reads multiple table entities\r\n\r\nThe C# code adds a reference to the Azure Storage SDK so that the entity type can derive from `TableEntity`.\r\n\r\n```csharp\r\n#r \"Microsoft.WindowsAzure.Storage\"\r\nusing Microsoft.WindowsAzure.Storage.Table;\r\n\r\npublic static void Run(string myQueueItem, IQueryable<Person> tableBinding, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    foreach (Person person in tableBinding.Where(p => p.PartitionKey == myQueueItem).ToList())\r\n    {\r\n        log.Info($\"Name: {person.Name}\");\r\n    }\r\n}\r\n\r\npublic class Person : TableEntity\r\n{\r\n    public string Name { get; set; }\r\n}\r\n``` \r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputTable",
          "required": true,
          "label": "$tableIn_name_label",
          "help": "$tableIn_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "tableName",
          "value": "string",
          "defaultValue": "inTable",
          "required": true,
          "label": "$tableIn_tableName_label",
          "help": "$tableIn_tableName_help",
          "validators": [
            {
              "expression": "^[A-Za-z][A-Za-z0-9]{2,62}$|^[{][a-zA-Z0-9]{1,126}[}]$|^[%][a-zA-Z0-9]{1,126}[%]$",
              "errorText": "$tableIn_tableName_errorText"
            }
          ]
        },
        {
          "name": "partitionKey",
          "value": "string",
          "required": false,
          "label": "$tableIn_partitionKey_label",
          "help": "$tableIn_partitionKey_help"
        },
        {
          "name": "rowKey",
          "value": "string",
          "required": false,
          "label": "$tableIn_rowKey_label",
          "help": "$tableIn_rowKey_help"
        },
        {
          "name": "take",
          "value": "int",
          "defaultValue": 50,
          "required": false,
          "label": "$tableIn_take_label",
          "help": "$tableIn_take_help"
        },
        {
          "name": "filter",
          "value": "string",
          "required": false,
          "label": "$tableIn_filter_label",
          "help": "$tableIn_filter_help"
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "Storage",
          "required": true,
          "label": "[variables('storageConnStringLabel')]",
          "help": "[variables('appSettingsHelp')]",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "documentDB",
      "displayName": "$documentDBOut_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "#### Settings for Azure Cosmos DB output binding\r\n\r\nThe following settings can be specified in either the portal or by using the `function.json` in the Advanced Editor with the corresponding property names:\r\n\r\n- **Document parameter name** or `name` : Variable name used in function code for the new output document.\r\n- **Output type** or `type` : must be set to *\"documentdb\"*. This parameter is automatically set if using the Azure Portal.\r\n- **Database name** or `databaseName` : The database containing the collection where the new document will be created.\r\n- **Collection Name** or `collectionName` : The collection where the new document will be created.\r\n- **If true, creates the Azure Cosmos DB database and collection** or `createIfNotExists` : This is a boolean value to indicate whether the collection will be created if it does not exist. The default is *false*. The reason for this is new collections are created with reserved throughput, which has pricing implications. For more details, please visit the [pricing page](https://azure.microsoft.com/en-us/pricing/details/cosmos-db/).\r\n- **Azure Cosmos DB account connection** or `connection` : This string must be an **Application Setting** set to the endpoint for your Azure Cosmos DB account. If you choose your account from the **Integrate** tab, a new App setting will be created for you with a name that takes the following form, `yourAccount_COSMOSDG`. If you need to manually create the App setting, the actual connection string must take the following form, `AccountEndpoint=<Endpoint for your account>;AccountKey=<Your primary access key>;`. \r\n- **Binding direction** or `direction` : must be set to *\"out\"*. This is automatically set if using the Azure Portal.\r\n\r\n#### Azure Cosmos DB output code example for a JavaScript queue trigger\r\n\r\n```javascript\r\nmodule.exports = function (context, input) {\r\n    \r\n    context.bindings.document = {\r\n        text : \"I'm running in a JavaScript function! Data: '\" + input + \"'\"\r\n    }   \r\n    \r\n    context.done();\r\n};\r\n```\r\n\r\nThe output document:\r\n\r\n```json\r\n{\r\n    \"text\": \"I'm running in a JavaScript function! Data: 'example queue data'\",\r\n    \"id\": \"01a817fe-f582-4839-b30c-fb32574ff13f\"\r\n}\r\n```\r\n\r\n#### Azure Cosmos DB output code example for a C# queue trigger\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, out object document, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    \r\n    document = new {\r\n        text = $\"I'm running in a C# function! {myQueueItem}\"\r\n    };\r\n}\r\n```\r\n\r\n#### Azure Cosmos DB output code example setting file name\r\n\r\nIf you want to set the name of the document in the function, just set the `id` value.  For example, if JSON content for an employee was being dropped into the queue similar to the following:\r\n\r\n```json\r\n{\r\n    \"name\" : \"John Henry\",\r\n    \"employeeId\" : \"123456\",\r\n    \"address\" : \"A town nearby\"\r\n}\r\n```\r\n\r\nYou could use the following C# code in a queue trigger function: \r\n\t\r\n```csharp\r\n#r \"Newtonsoft.Json\"\r\n\r\nusing System;\r\nusing Newtonsoft.Json;\r\nusing Newtonsoft.Json.Linq;\r\n\r\npublic static void Run(string myQueueItem, out object employeeDocument, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    \r\n    dynamic employee = JObject.Parse(myQueueItem);\r\n    \r\n    employeeDocument = new {\r\n        id = employee.name + \"-\" + employee.employeeId,\r\n        name = employee.name,\r\n        employeeId = employee.employeeId,\r\n        address = employee.address\r\n    };\r\n}\r\n```\r\n\r\nExample output:\r\n\r\n```json\r\n{\r\n    \"id\": \"John Henry-123456\",\r\n    \"name\": \"John Henry\",\r\n    \"employeeId\": \"123456\",\r\n    \"address\": \"A town nearby\"\r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputDocument",
          "required": true,
          "label": "$documentDBOut_name_label",
          "help": "$documentDBOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "databaseName",
          "value": "string",
          "defaultValue": "outDatabase",
          "required": true,
          "label": "$documentDBOut_databaseName_label",
          "help": "$documentDBOut_databaseName_help"
        },
        {
          "name": "collectionName",
          "value": "string",
          "defaultValue": "MyCollection",
          "required": true,
          "label": "$documentDBOut_collectionName_label",
          "help": "$documentDBOut_collectionName_help"
        },
        {
          "name": "createIfNotExists",
          "value": "boolean",
          "defaultValue": false,
          "required": true,
          "label": "$documentDBOut_createIfNotExists_label",
          "help": "$documentDBOut_createIfNotExists_help"
        },
        {
          "name": "partitionKey",
          "value": "string",
          "required": false,
          "label": "$documentDB_partitionKey_label",
          "help": "$documentDBOut_partitionKey_help"
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "DocumentDB",
          "required": true,
          "label": "$documentDBOut_connection_label",
          "help": "$documentDBOut_connection_help",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "documentDB",
      "displayName": "$documentDBIn_displayName",
      "direction": "in",
      "enabledInTryMode": false,
      "documentation": "#### Settings for Azure Cosmos DB input binding\r\n\r\nThe following settings can be specified in either the portal or by using the `function.json` in the Advanced Editor with the corresponding property names:\r\n\r\n- **Document parameter name** or `name` : Variable name used in function code for the document.\r\n- **Input type** or `type` : must be set to \"documentdb\". This parameter is automatically set if using the Azure Portal.\r\n- **Database name** or `databaseName` : The database containing the document.\r\n- **Collection name** or `collectionName` : The collection containing the document.\r\n- **Document ID** or `id` : The Id of the document to retrieve. This property supports bindings similar to `{queueTrigger}`, which will use the string value of the queue message as the document Id. This property is optional in the Azure Portal.\r\n- **SQL Query** or `sqlQuery` : Azure Cosmos DB SQL query used for retrieving multiple documents. The query supports runtime bindings. For example: `SELECT * FROM c where c.departmentId = {departmentId}`\r\n- **Azure Cosmos DB account connection** or `connection` : This string must be an Application Setting set to the endpoint for your Azure Cosmos DB account. \r\n- **Input direction** or `direction`  : must be set to *\"in\"*. This parameter is automatically set if using the Azure Portal.\r\n\r\nThe properties `id` and `sqlQuery` cannot be set at the same time. If neither `id` nor `sqlQuery` is set, the entire collection is retrieved.\r\n\r\n#### Azure Cosmos DB single document input code example for a C# queue trigger\r\n\r\nIn this example, the Azure Cosmos DB input binding will retrieve the document with the id that matches the queue message string and pass it to the 'document' parameter. If that document is not found, the 'document' parameter will be null. The document is then replaced with the modified document when the function exits.\r\n\r\nInput binding settings:\r\n```javascript\r\n{\r\n    \"name\": \"document\",\r\n    \"type\": \"documentdb\",\r\n    \"direction\": \"in\",\r\n    \"databaseName\": \"MyDb\",\r\n    \"collectionName\": \"MyCollection\",\r\n    \"id\": \"{queueTrigger}\"\r\n    \"connection\": \"Azure Cosmos DBConnection\"\r\n}\r\n```\r\n\r\nC# code:\r\n```csharp\r\npublic static void Run(string myQueueItem, dynamic document)\r\n{   \r\n    document.text = \"This has changed.\";\r\n}\r\n```\r\n\r\n#### Azure Cosmos DB input code example for a JavaScript queue trigger\r\n\r\nIn this example, the Azure Cosmos DB input binding will retrieve the document with the id that matches the queue message string and pass it to the `documentIn` binding property. In JavaScript functions, updated documents are not sent back to the collection. However, you can pass the input binding directly to a Azure Cosmos DB output binding named `documentOut` to support updates. This code example updates the text property of the input document and sets it as the output document.\r\n \r\n\r\nInput binding settings:\r\n```javascript\r\n{\r\n    \"name\": \"documentIn\",\r\n    \"type\": \"documentdb\",\r\n    \"direction\": \"in\",\r\n    \"databaseName\": \"MyDb\",\r\n    \"collectionName\": \"MyCollection\",\r\n    \"id\": \"{queueTrigger}\"\r\n    \"connection\": \"CosmosDBConnection\"\r\n}\r\n```\r\n\r\nJavaScript code:\r\n```javascript\r\nmodule.exports = function (context, input) {   \r\n    context.bindings.documentOut = context.bindings.documentIn;\r\n    context.bindings.documentOut.text = \"This was updated!\";\r\n    context.done();\r\n};\r\n```\r\n\r\n#### Azure Cosmos DB multiple document input code example for a C# queue trigger\r\n \r\nIn this example, the Azure Cosmos DB input binding will retrieve all documents returned by the specified `sqlQuery`. The `departmentId` value is automatically inserted to the query from the input trigger. For example, a queue message of `{ \"departmentId\" : \"Finance\" }` would return all records for the Finance department.\r\n\r\nInput binding settings:\r\n```javascript\r\n{\r\n    \"name\": \"documents\",\r\n    \"type\": \"documentdb\",\r\n    \"direction\": \"in\",\r\n    \"databaseName\": \"MyDb\",\r\n    \"collectionName\": \"MyCollection\",\r\n    \"sqlQuery\": \"SELECT * from c where c.departmentId = {departmentId}\"\r\n    \"connection\": \"CosmosDBConnection\"\r\n}\r\n```\r\n\r\nC# code\r\n```csharp\r\npublic static void Run(QueuePayload myQueueItem, IEnumerable<dynamic> documents)\r\n{   \r\n    foreach (var doc in documents)\r\n    {\r\n        // operate on each document\r\n    }    \r\n}\r\n\r\npublic class QueuePayload\r\n{\r\n    public string departmentId { get; set; }\r\n}\r\n```\r\n\r\n#### Azure Cosmos DB multiple document input code example for a JavaScript queue trigger\r\n \r\nIn this example, the Azure Cosmos DB input binding will retrieve all documents returned by the specified `sqlQuery`. The `departmentId` value is automatically inserted to the query from the input trigger. For example, a queue message of `{ \"departmentId\" : \"Finance\" }` would return all records for the Finance department.\r\n\r\nInput binding settings:\r\n```javascript\r\n{\r\n    \"name\": \"documents\",\r\n    \"type\": \"documentdb\",\r\n    \"direction\": \"in\",\r\n    \"databaseName\": \"MyDb\",\r\n    \"collectionName\": \"MyCollection\",\r\n    \"sqlQuery\": \"SELECT * from c where c.departmentId = {departmentId}\"\r\n    \"connection\": \"CosmosDBConnection\"\r\n}\r\n```\r\n\r\nJavaScript code:\r\n```javascript\r\nmodule.exports = function (context, input) {    \r\n    var documents = context.bindings.documents;\r\n    for (var i = 0; i < documents.length; i++) {\r\n        var document = documents[i];\r\n        // operate on each document\r\n    }\t    \r\n    context.done();\r\n};\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputDocument",
          "required": true,
          "label": "$documentDBIn_name_label",
          "help": "$documentDBIn_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "databaseName",
          "value": "string",
          "defaultValue": "inDatabase",
          "required": true,
          "label": "$documentDBIn_databaseName_label",
          "help": "$documentDBIn_databaseName_help"
        },
        {
          "name": "collectionName",
          "value": "string",
          "defaultValue": "MyCollection",
          "required": true,
          "label": "$documentDBIn_collectionName_label",
          "help": "$documentDBIn_collectionName_help"
        },
        {
          "name": "id",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$documentDBIn_id_label",
          "help": "$documentDBIn_id_help"
        },
        {
          "name": "partitionKey",
          "value": "string",
          "required": false,
          "label": "$documentDB_partitionKey_label",
          "help": "$documentDBIn_partitionKey_help"
        },
        {
          "name": "sqlQuery",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$documentDBIn_sqlQuery_label",
          "help": "$documentDBIn_sqlQuery_help"
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "DocumentDB",
          "required": true,
          "label": "$documentDBIn_connection_label",
          "help": "$documentDBIn_connection_help",
          "placeholder": "[variables('selectConnection')]"
        }
      ]
    },
    {
      "type": "mobileTable",
      "displayName": "$mobileTableOut_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "Using Mobile Apps table binding requires setting up an app setting. See these docs to see the full details: [go to azure.com](https://azure.microsoft.com/en-us/documentation/articles/functions-bindings-mobile-apps/#create-an-environment-variable-for-your-mobile-app-backend-url)\r\n\r\n#### Settings for Mobile Apps output binding\r\n\r\nThe settings support the following properties:\r\n\r\n- `name` : Variable name used in function code for the new record.\r\n- `type` : Binding type that must be set to *mobileTable*.\r\n- `tableName` : The table where the new record is created.\r\n- `apiKey` : String that is the application setting that specifies the optional API key for the mobile app. This is required when your mobile app uses an API key to restrict client access.\r\n- `connection` : String that is the name of the environment variable in application settings that specifies the URL of your mobile app backend.\r\n- `direction` : Binding direction, which must be set to *out*.\r\n\r\n#### Azure Mobile Apps code example for a C# queue trigger\r\n\r\nThis C# code example inserts a new record into a Mobile Apps table endpoint with a *Text* property into the table specified in the above binding.\r\n\r\n```csharp\r\npublic static void Run(string myQueueItem, out object record)\r\n{\r\n    record = new {\r\n        Text = $\"I'm running in a C# function! {myQueueItem}\"\r\n    };\r\n}\r\n```\r\n\r\n#### Azure Mobile Apps code example for a JavaScript queue trigger\r\n\r\nThis JavaScript code example inserts a new record into a Mobile Apps table endpoint with a *text* property into the table specified in the above binding.\r\n\r\n```javascript\r\nmodule.exports = function (context, input) {\r\n\r\n    context.bindings.record = {\r\n        text : \"I'm running in a JavaScript function! Data: '\" + input + \"'\"\r\n    }   \r\n\r\n    context.done();\r\n};\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "outputRecord",
          "required": true,
          "label": "$mobileTableOut_name_label",
          "help": "$mobileTableOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "tableName",
          "value": "string",
          "defaultValue": "outTable",
          "required": true,
          "label": "$mobileTableOut_tableName_label",
          "help": "$mobileTableOut_tableName_help"
        },
        {
          "name": "connection",
          "value": "string",
          "defaultValue": "My_MobileApp_Uri",
          "required": true,
          "label": "$mobileTableOut_connection_label",
          "help": "$mobileTableOut_connection_help"
        },
        {
          "name": "apiKey",
          "value": "string",
          "required": false,
          "label": "$mobileTableOut_apiKey_label",
          "help": "$mobileTableOut_apiKey_help"
        }
      ]
    },
    {
      "type": "mobileTable",
      "displayName": "$mobileTableIn_displayName",
      "direction": "in",
      "enabledInTryMode": false,
      "documentation": "Using Mobile Apps table binding requires setting up an app setting. See these docs to see the full details: [go to azure.com](https://azure.microsoft.com/en-us/documentation/articles/functions-bindings-mobile-apps/#create-an-environment-variable-for-your-mobile-app-backend-url)\r\n\r\n#### Settings for Mobile Apps input binding\r\n\r\nThe *function.json* file supports the following properties:\r\n\r\n- `name` : Variable name used in function code for the new record.\r\n- `type` : Biding type must be set to *mobileTable*.\r\n- `tableName` : The table where the new record will be created.\r\n- `id` : The ID of the record to retrieve. This property supports bindings similar to `{queueTrigger}`, which will use the string value of the queue message as the record Id.\r\n- `apiKey` : String that is the application setting that specifies the optional API key for the mobile app. This is required when your mobile app uses an API key to restrict client access.\r\n- `connection` : String that is the name of the environment variable in application settings that specifies the URL of your mobile app backend.\r\n- `direction` : Binding direction, which must be set to *in*.\r\n\r\n#### Azure Mobile Apps code example for a C# queue trigger\r\n\r\nThe input binding retrieves the record from a Mobile Apps table endpoint with the ID that matches the queue message string and passes it to the *record* parameter. When the record is not found, the parameter is null. The record is then updated with the new *Text* value when the function exits.\r\n\r\n```csharp\r\n#r \"Newtonsoft.Json\"\t\r\nusing Newtonsoft.Json.Linq;\r\n\r\npublic static void Run(string myQueueItem, JObject record)\r\n{\r\n    if (record != null)\r\n    {\r\n        record[\"Text\"] = \"This has changed.\";\r\n    }    \r\n}\r\n```\r\n\r\n#### Azure Mobile Apps code example for a JavaScript queue trigger\r\n\r\nThe input binding retrieves the record from a Mobile Apps table endpoint with the ID that matches the queue message string and passes it to the *record* parameter. In JavaScript functions, updated records are not sent back to the table. This code example writes the retrieved record to the log.\r\n\r\n```javascript\r\nmodule.exports = function (context, input) {    \r\n    context.log(context.bindings.record);\r\n    context.done();\r\n};\r\n```\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputRecord",
          "required": true,
          "label": "$mobileTableIn_name_label",
          "help": "$mobileTableIn_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "tableName",
          "value": "string",
          "defaultValue": "inTable",
          "required": true,
          "label": "$mobileTableIn_tableName_label",
          "help": "$mobileTableIn_tableName_help"
        },
        {
          "name": "id",
          "value": "string",
          "defaultValue": "{itemId}",
          "required": true,
          "label": "$mobileTableIn_id_label",
          "help": "$mobileTableIn_id_help"
        },
        {
          "name": "connection",
          "value": "string",
          "defaultValue": "My_MobileApp_Uri",
          "required": true,
          "label": "$mobileTableIn_connection_label",
          "help": "$mobileTableIn_connection_help"
        },
        {
          "name": "apiKey",
          "value": "string",
          "required": false,
          "label": "$mobileTableIn_apiKey_label",
          "help": "$mobileTableIn_apiKey_help"
        }
      ]
    },
    {
      "type": "notificationHub",
      "displayName": "$notificationHubOut_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "## Settings for Azure Notification Hub output binding\r\n\r\nThe settings provide the following properties:\r\n\r\n- `name` : Variable name used in function code for the notification hub message.\r\n- `type` : must be set to *\"notificationHub\"*.\r\n- `tagExpression` : Tag expressions allow you to specify that notifications be delivered to a set of devices who have registered to receive notifications that match the tag expression.  For more information, see [Routing and tag expressions](https://azure.microsoft.com/en-us/documentation/articles/notification-hubs-tags-segment-push-message/).\r\n- `hubName` : Name of the notification hub resource in the Azure portal.\r\n- `connection` : This connection string must be an **Application Setting** connection string set to the *DefaultFullSharedAccessSignature* value for your notification hub.\r\n- `direction` : must be set to *\"out\"*. \r\n\r\n## Azure Notification Hub connection string setup\r\n\r\nTo use a Notification hub output binding you must configure the connection string for the hub. You can do this on the *Integrate* tab by simply selecting your notification hub or creating a new one. \r\n\r\nYou can also manually add a connection string for an existing hub by adding a connection string for the *DefaultFullSharedAccessSignature* to your notification hub. This connection string provides your function access permission to send notification messages. The *DefaultFullSharedAccessSignature* connection string value can be accessed from the **keys** button in the main blade of your notification hub resource in the Azure portal. To manually add a connection string for your hub, use the following steps: \r\n\r\n1. On the **Function app** blade of the Azure portal, click **Open Application Settings**.\r\n2. Scroll down to the **Connection strings** section, and add an named entry for *DefaultFullSharedAccessSignature* value for you notification hub. Change the type to **Custom**.\r\n3. Reference your connection string name in the output bindings. Similar to **MyHubConnectionString** used in the example above.\r\n\r\n## Azure Notification Hub code example for a JavaScript timer trigger \r\n\r\nThis example sends a notification for a [template registration](https://azure.microsoft.com/en-us/documentation/articles/notification-hubs-templates-cross-platform-push-messages/) that contains `location` and `message`.\r\n\r\n```javascript\r\nmodule.exports = function (context, myTimer) {\r\n    var timeStamp = new Date().toISOString();\r\n    \r\n    if(myTimer.isPastDue)\r\n    {\r\n        context.log('JavaScript is running late!');\r\n    }\r\n    context.log('JavaScript timer trigger function ran!', timeStamp);  \r\n    context.bindings.notification = {\r\n        location: \"Redmond\",\r\n        message: \"Hello from JavaScript!\"\r\n    };\r\n    context.done();\r\n};\r\n```\r\n\r\n## Azure Notification Hub code example for a C# queue trigger\r\n\r\nThis example sends a notification for a [template registration](https://azure.microsoft.com/en-us/documentation/articles/notification-hubs-templates-cross-platform-push-messages/) that contains `message`.\r\n\r\n```csharp\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing System.Collections.Generic;\r\n    \r\npublic static void Run(string myQueueItem,  out IDictionary<string, string> notification, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    notification = GetTemplateProperties(myQueueItem);\r\n}\r\n    \r\nprivate static IDictionary<string, string> GetTemplateProperties(string message)\r\n{\r\n    Dictionary<string, string> templateProperties = new Dictionary<string, string>();\r\n    templateProperties[\"message\"] = message;\r\n    return templateProperties;\r\n}\r\n```\r\n\r\nThis example sends a notification for a [template registration](https://azure.microsoft.com/en-us/documentation/articles/notification-hubs-templates-cross-platform-push-messages/) that contains `message` using a valid JSON string.\r\n\r\n```csharp    \r\npublic static void Run(string myQueueItem,  out string notification, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    notification = \"{\\\"message\\\":\\\"Hello from C#. Processed a queue item!\\\"}\";\r\n}\r\n```\r\n\r\n## Azure Notification Hub queue trigger C# code example using Notification type\r\n\r\nThis example shows how to use the `Notification` type that is defined in the [Microsoft Azure Notification Hubs Library](https://www.nuget.org/packages/Microsoft.Azure.NotificationHubs/). In order to use this type, and the library, you must upload a *project.json* file for your function app. The project.json file is a JSON text file which will look similar to the follow:\r\n```json\r\n{\r\n    \"frameworks\": {\r\n    \".NETFramework,Version=v4.6\": {\r\n        \"dependencies\": {\r\n        \"Microsoft.Azure.NotificationHubs\": \"1.0.4\"\r\n        }\r\n    }\r\n    }\r\n}\r\n```\r\n\r\nFor more information on uploading your project.json file, see [uploading a project.json file](https://azure.microsoft.com/en-us/documentation/articles/functions-reference-csharp/#_how-to-upload-a-projectjson-file).\r\n\r\nExample code:\r\n\r\n```csharp\r\nusing System;\r\nusing System.Threading.Tasks;\r\nusing Microsoft.Azure.NotificationHubs;\r\n    \r\npublic static void Run(string myQueueItem,  out Notification notification, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed: {myQueueItem}\");\r\n    notification = GetTemplateNotification(myQueueItem);\r\n}\r\nprivate static TemplateNotification GetTemplateNotification(string message)\r\n{\r\n    Dictionary<string, string> templateProperties = new Dictionary<string, string>();\r\n    templateProperties[\"message\"] = message;\r\n    return new TemplateNotification(templateProperties);\r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "notification",
          "required": true,
          "label": "$notificationHubOut_name_label",
          "help": "$notificationHubOut_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "hubName",
          "value": "string",
          "required": true,
          "label": "$notificationHubOut_hubName_label",
          "help": "$notificationHubOut_hubName_help"
        },
        {
          "name": "connection",
          "value": "string",
          "resource": "NotificationHub",
          "required": true,
          "label": "$notificationHubOut_connection_label",
          "help": "$notificationHubOut_connection_help",
          "placeholder": "[variables('selectConnection')]"
        },
        {
          "name": "tagExpression",
          "value": "string",
          "required": false,
          "label": "$notificationHubOut_tagExpression_label",
          "help": "$notificationHubOut_tagExpression_help"
        },
        {
          "name": "enableTestSend",
          "value": "boolean",
          "required": false,
          "label": "$notificationHubOut_enableTestSend_label",
          "help": "$notificationHubOut_enableTestSend_help"
        },
        {
          "name": "platform",
          "value": "enum",
          "enum": [
            {
              "value": "",
              "display": "Template"
            },
            {
              "value": "apns",
              "display": "Apple (APNS)"
            },
            {
              "value": "adm",
              "display": "Amazon (ADM)"
            },
            {
              "value": "gcm",
              "display": "Google (GCM)"
            },
            {
              "value": "wns",
              "display": "Windows (WNS)"
            },
            {
              "value": "mpns",
              "display": "Windows Phone (MPNS)"
            }
          ],
          "label": "$notificationHubOut_platform_label",
          "help": "$notificationHubOut_platform_help"
        }
      ]
    },
    {
      "type": "sendGrid",
      "displayName": "$sendGrid_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "#### Settings for SendGrid output binding\r\n\r\n- `name` : Variable name used in function code for the SendGrid Mail Object.\r\n- `type` : must be set to *\"sendGrid\"*.\r\n- `apiKey` : The name of the app setting containing your SendGrid developer API key.\r\n- `to` : Email address to which the message should be sent. Can be of the form `user@host.com` or `Display Name <user@host.com>`. If not provided here, the value can be specified in code.\r\n- `from` : Email address to which the message should be sent. Can be of the form `user@host.com` or `Display Name <user@host.com>`. If not provided here, the value can be specified in code.\r\n- `subject` : Subject line to use for the message. If not provided here, the value can be specified in code.\r\n- `text` : Text body to use for the message. If not provided here, the value can be specified in code. \r\n- `direction` : must be set to *\"out\"*. \r\n\r\n#### SendGrid output code example for a JavaScript queue trigger\r\n\r\n```javascript\r\nvar util = require('util');\r\n\r\n// The 'From' andd 'To' fields are automatically populated with the values specified by the binding settings.\r\n//\r\n// You can also optionally configure the default From/To addresses globally via host.config, e.g.:\r\n//\r\n// {\r\n//   \"sendGrid\": {\r\n//      \"to\": \"user@host.com\",\r\n//      \"from\": \"Azure Functions <samples@functions.com>\"\r\n//   }\r\n// }\r\n\r\nmodule.exports = function (context, order) {\r\n    context.log('JavaScript queue trigger function processed order', order.orderId);\r\n\r\n    context.done(null, {\r\n        message: {\r\n            subject: util.format('Thanks for your order (#%d)!', order.orderId),\r\n            content: [{\r\n                type: 'text/plain',\r\n                value: util.format(\"%s, your order (%d) is being processed!\", order.customerName, order.orderId)\r\n            }]\r\n        }\r\n    });\r\n}\r\n```\r\n\r\n#### SendGrid output code example for a C# queue trigger\r\n\r\n```csharp\r\n#r \"SendGrid\"\r\n\r\nusing System;\r\nusing SendGrid.Helpers.Mail;\r\nusing Microsoft.Azure.WebJobs.Host;\r\n\r\n// The 'From' and 'To' fields are automatically populated with the values specified by the binding settings.\r\n//\r\n// You can also optionally configure the default From/To addresses globally via host.config, e.g.:\r\n//\r\n// {\r\n//   \"sendGrid\": {\r\n//      \"to\": \"user@host.com\",\r\n//      \"from\": \"Azure Functions <samples@functions.com>\"\r\n//   }\r\n// }\r\npublic static Mail Run(Order order, TraceWriter log)\r\n{\r\n    log.Info($\"C# Queue trigger function processed order: {order.OrderId}\");\r\n    \r\n    Mail message = new Mail()\r\n    {\r\n        Subject = $\"Thanks for your order (#{order.OrderId})!\"\r\n    };\r\n\r\n    Content content = new Content\r\n    {\r\n        Type = \"text/plain\",\r\n        Value = $\"{order.CustomerName}, your order ({order.OrderId}) is being processed!\"\r\n    };\r\n\r\n    message.AddContent(content);    \r\n    return message;\r\n}\r\n\r\npublic class Order\r\n{\r\n    public string OrderId { get; set; }\r\n    public string CustomerName { get; set; }\r\n    public string CustomerEmail { get; set; }\r\n}\r\n```\r\n\r\n#### Sample Queue message for the above C# and Javascript code examples\r\n\r\n```json\r\n{\r\n    \"OrderId\": 12345,\r\n    \"CustomerName\": \"Joe Schmoe\", \r\n    \"CustomerEmail\": \"joeschmoe@foo.com\" \r\n}\r\n```",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "message",
          "required": true,
          "label": "$sendGrid_name_label",
          "help": "$sendGrid_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "apiKey",
          "resource": "AppSetting",
          "value": "string",
          "defaultValue": "SendGridApiKey",
          "required": true,
          "label": "$sendGrid_apiKey_label",
          "help": "$sendGrid_apiKey_help"
        },
        {
          "name": "to",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$sendGrid_to_label",
          "help": "$sendGrid_to_help"
        },
        {
          "name": "from",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$sendGrid_from_label",
          "help": "$sendGrid_from_help"
        },
        {
          "name": "subject",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$sendGrid_subject_label",
          "help": "$sendGrid_subject_help"
        },
        {
          "name": "text",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$sendGrid_text_label",
          "help": "$sendGrid_text_help"
        }
      ]
    },
    {
      "type": "twilioSms",
      "displayName": "$twilioSms_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "This feature is experimental. Docs will be coming soon!",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "message",
          "required": true,
          "label": "$twilioSms_name_label",
          "help": "$twilioSms_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "accountSid",
          "value": "string",
          "defaultValue": "TwilioAccountSid",
          "required": true,
          "label": "$twilioSms_accountsid_label",
          "help": "$twilioSms_accountsid_help"
        },
        {
          "name": "authToken",
          "value": "string",
          "defaultValue": "TwilioAuthToken",
          "required": true,
          "label": "$twilioSms_authtoken_label",
          "help": "$twilioSms_authtoken_help"
        },
        {
          "name": "to",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$twilioSms_to_label",
          "help": "$twilioSms_to_help"
        },
        {
          "name": "from",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$twilioSms_from_label",
          "help": "$twilioSms_from_help"
        },
        {
          "name": "body",
          "value": "string",
          "defaultValue": "",
          "required": false,
          "label": "$twilioSms_body_label",
          "help": "$twilioSms_body_help"
        }
      ]
    },
    {
      "type": "bot",
      "displayName": "$bot_out_displayName",
      "direction": "out",
      "enabledInTryMode": false,
      "documentation": "This feature is experimental. Docs will be coming soon!",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "$return",
          "required": true,
          "label": "$bot_out_name_label",
          "help": "$bot_out_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "botId",
          "value": "string",
          "required": true,
          "label": "$bot_botId_label",
          "help": "$bot_botId_help"
        },
        {
          "name": "secret",
          "value": "string",
          "required": false,
          "label": "$bot_out_secret_label",
          "help": "$bot_out_secret_help"
        }
      ]
    },
    {
      "type": "eventGridTrigger",
      "displayName": "$eventGrid_trigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": false,
      "documentation": "This feature is experimental. Docs will be coming soon!",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "EventGridTrigger",
          "required": true,
          "label": "$eventGrid_trigger_name_label",
          "help": "$eventGrid_trigger_name_help",
          "validators": [
            {
              "expression": "(^[a-zA-Z][a-zA-Z0-9]{0,127}$)|^\\$return$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        }
      ]
    },
    {
      "type": "cosmosDBTrigger",
      "displayName": "$cosmosDB_trigger_displayName",
      "direction": "trigger",
      "enabledInTryMode": false,
      "documentation": "#### Settings for Azure Cosmos DB trigger binding\r\n\r\nThe Azure Cosmos DB Trigger leverages the [Azure Cosmos DB Change Feed](https://docs.microsoft.com/azure/cosmos-db/change-feed) to listen for changes across partitions. It uses a **second collection** to store *leases* over the partitions.\r\n\r\nBoth the collection being monitored for changes and the collection that will hold the leases need to be available for the trigger to work.\r\n\r\nThe settings for an Azure Cosmos DB trigger specifies the following properties and they can be set in either the portal or by using the `function.json` in the Advanced Editor with the corresponding property names:\r\n\r\n- **Trigger type** or `type` : Must be set to *cosmosDBTrigger*.\r\n- **Document collection parameter name** or `name` : The variable name used in function code for the list of documents. \r\n- **Trigger direction** or `direction` : Must be set to *in*. This parameter is automatically set if using the Azure Portal.\r\n- **Azure Cosmos DB account connection** or `connectionStringSetting` : *optional*. The name of an app setting that contains the connection string to the service which holds the collection to monitor. If `connectionStringSetting` is not set then the value of AzureWebJobsDocumentDBConnectionStringName setting is used.\r\n- **Database name** or `databaseName` : The name of the database that holds the collection to monitor.\r\n- **Collection name** or `collectionName` : The name of the collection to monitor.\r\n- **Azure Cosmos DB account connection for leases** or `leaseConnectionStringSetting` : *optional*. The name of an app setting that contains the connection string to the service which holds the lease collection. If not set it will connect to the service defined by `connectionStringSetting`. This parameter is automatically set if using the Azure Portal.\r\n- **Database name for leases** or `leaseDatabaseName` : *optional*. The name of the database that holds the collection to store leases. If not set, it will use the value of `databaseName`. This parameter is automatically set if using the Azure Portal.\r\n- **Collection name for leases** or `leaseCollectionName` : *optional*. The name of the collection to store leases. If not set, it will use \"leases\".\r\n- **Create lease collection if it does not exist** or `createLeaseCollectionIfNotExists` true/false: *optional*. Checks for existence and automatically creates the leases collection. Default is `false`.\r\n- **Collection throughput for leases** or `leaseCollectionThroughput` : *optional*. When `createLeaseCollectionIfNotExists` is set to `true`, defines the amount of Request Units to assign to the created lease collection. This parameter is automatically set if using the Azure Portal.\r\n\r\n> Connection strings used for the Lease collection require **write permission**.\r\n\r\nThe following settings customize the internal Change Feed mechanism and Lease collection usage, and can be set in the `function.json` in the Advanced Editor with the corresponding property names:\r\n\r\n- `leaseCollectionPrefix` : When set, it adds a prefix to the leases created in the Lease collection for this Function, effectively allowing two separate Azure Functions to share the same Lease collection by using different prefixes.\r\n- `feedPollDelay` : When set, it defines, in milliseconds, the delay in between polling a partition for new changes on the feed, after all current changes are drained. Default is 5000 (5 seconds).\r\n- `leaseAcquireInterval` : When set, it defines, in milliseconds, the interval to kick off a task to compute if partitions are distributed evenly among known host instances. Default is 13000 (13 seconds).\r\n- `leaseExpirationInterval` : When set, it defines, in milliseconds, the interval for which the lease is taken on a lease representing a partition. If the lease is not renewed within this interval, it will cause it to expire and ownership of the partition will move to another instance. Default is 60000 (60 seconds).\r\n- `leaseRenewInterval` : When set, it defines, in milliseconds, the renew interval for all leases for partitions currently held by an instance. Default is 17000 (17 seconds).\r\n- `checkpointFrequency` : When set, it defines, in milliseconds, the interval between lease checkpoints. Default is always after a successful Function call.\r\n- `maxItemsPerInvocation` : When set, it customizes the maximum amount of items received per Function call.\r\n\r\n#### Azure Cosmos DB trigger C# example\r\n \r\n\t#r \"Microsoft.Azure.Documents.Client\"\r\n\tusing Microsoft.Azure.Documents;\r\n\tusing System.Collections.Generic;\r\n\tusing System;\r\n\tpublic static void Run(IReadOnlyList<Document> input, TraceWriter log)\r\n\t{\r\n\t\tlog.Verbose(\"Documents modified \" + input.Count);\r\n\t\tlog.Verbose(\"First document Id \" + input[0].Id);\r\n\t}\r\n\r\n#### Azure Cosmos DB trigger JavaScript example\r\n\r\n\tmodule.exports = function (context, input) {\r\n\t\tcontext.log('First document Id modified : ', input[0].id);\r\n\r\n\t\tcontext.done();\r\n\t}\r\n",
      "settings": [
        {
          "name": "name",
          "value": "string",
          "defaultValue": "inputDocuments",
          "required": true,
          "label": "$cosmosDBIn_name_label",
          "help": "$cosmosDBIn_name_help",
          "validators": [
            {
              "expression": "^[a-zA-Z][a-zA-Z0-9]{0,127}$",
              "errorText": "[variables('parameterName')]"
            }
          ]
        },
        {
          "name": "connectionStringSetting",
          "value": "string",
          "required": true,
          "resource": "DocumentDB",
          "label": "$cosmosDBIn_connection_label",
          "help": "$cosmosDBIn_connection_help",
          "placeholder": "[variables('selectConnection')]"
        },
        {
          "name": "databaseName",
          "value": "string",
          "defaultValue": "",
          "required": true,
          "label": "$cosmosDBIn_databaseName_label",
          "help": "$cosmosDBIn_databaseName_help"
        },
        {
          "name": "collectionName",
          "value": "string",
          "defaultValue": "",
          "required": true,
          "label": "$cosmosDBIn_collectionName_label",
          "help": "$cosmosDBIn_collectionName_help"
        },
        {
          "name": "leaseCollectionName",
          "value": "string",
          "required": true,
          "label": "$cosmosDBIn_leaseCollectionName_label",
          "help": "$cosmosDBIn_leaseCollectionName_help"
        },
        {
          "name": "createLeaseCollectionIfNotExists",
          "value": "boolean",
          "defaultValue": true,
          "required": true,
          "label": "$cosmosDBIn_createIfNotExists_label",
          "help": "$cosmosDBIn_createIfNotExists_help"
        }
      ]
    }
  ]
}